// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"foodworks.ml/m/internal/generated/ent/customer"
	"foodworks.ml/m/internal/generated/ent/predicate"
	"foodworks.ml/m/internal/generated/ent/product"
	"foodworks.ml/m/internal/generated/ent/rating"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// RatingUpdate is the builder for updating Rating entities.
type RatingUpdate struct {
	config
	hooks      []Hook
	mutation   *RatingMutation
	predicates []predicate.Rating
}

// Where adds a new predicate for the builder.
func (ru *RatingUpdate) Where(ps ...predicate.Rating) *RatingUpdate {
	ru.predicates = append(ru.predicates, ps...)
	return ru
}

// SetComment sets the comment field.
func (ru *RatingUpdate) SetComment(s string) *RatingUpdate {
	ru.mutation.SetComment(s)
	return ru
}

// SetRating sets the rating field.
func (ru *RatingUpdate) SetRating(i int) *RatingUpdate {
	ru.mutation.ResetRating()
	ru.mutation.SetRating(i)
	return ru
}

// AddRating adds i to rating.
func (ru *RatingUpdate) AddRating(i int) *RatingUpdate {
	ru.mutation.AddRating(i)
	return ru
}

// SetCustomerID sets the customer edge to Customer by id.
func (ru *RatingUpdate) SetCustomerID(id int) *RatingUpdate {
	ru.mutation.SetCustomerID(id)
	return ru
}

// SetNillableCustomerID sets the customer edge to Customer by id if the given value is not nil.
func (ru *RatingUpdate) SetNillableCustomerID(id *int) *RatingUpdate {
	if id != nil {
		ru = ru.SetCustomerID(*id)
	}
	return ru
}

// SetCustomer sets the customer edge to Customer.
func (ru *RatingUpdate) SetCustomer(c *Customer) *RatingUpdate {
	return ru.SetCustomerID(c.ID)
}

// SetProductID sets the product edge to Product by id.
func (ru *RatingUpdate) SetProductID(id int) *RatingUpdate {
	ru.mutation.SetProductID(id)
	return ru
}

// SetNillableProductID sets the product edge to Product by id if the given value is not nil.
func (ru *RatingUpdate) SetNillableProductID(id *int) *RatingUpdate {
	if id != nil {
		ru = ru.SetProductID(*id)
	}
	return ru
}

// SetProduct sets the product edge to Product.
func (ru *RatingUpdate) SetProduct(p *Product) *RatingUpdate {
	return ru.SetProductID(p.ID)
}

// Mutation returns the RatingMutation object of the builder.
func (ru *RatingUpdate) Mutation() *RatingMutation {
	return ru.mutation
}

// ClearCustomer clears the "customer" edge to type Customer.
func (ru *RatingUpdate) ClearCustomer() *RatingUpdate {
	ru.mutation.ClearCustomer()
	return ru
}

// ClearProduct clears the "product" edge to type Product.
func (ru *RatingUpdate) ClearProduct() *RatingUpdate {
	ru.mutation.ClearProduct()
	return ru
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ru *RatingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RatingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RatingUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RatingUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RatingUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RatingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rating.Table,
			Columns: rating.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rating.FieldID,
			},
		},
	}
	if ps := ru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Comment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rating.FieldComment,
		})
	}
	if value, ok := ru.mutation.Rating(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rating.FieldRating,
		})
	}
	if value, ok := ru.mutation.AddedRating(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rating.FieldRating,
		})
	}
	if ru.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rating.CustomerTable,
			Columns: []string{rating.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rating.CustomerTable,
			Columns: []string{rating.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rating.ProductTable,
			Columns: []string{rating.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rating.ProductTable,
			Columns: []string{rating.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rating.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RatingUpdateOne is the builder for updating a single Rating entity.
type RatingUpdateOne struct {
	config
	hooks    []Hook
	mutation *RatingMutation
}

// SetComment sets the comment field.
func (ruo *RatingUpdateOne) SetComment(s string) *RatingUpdateOne {
	ruo.mutation.SetComment(s)
	return ruo
}

// SetRating sets the rating field.
func (ruo *RatingUpdateOne) SetRating(i int) *RatingUpdateOne {
	ruo.mutation.ResetRating()
	ruo.mutation.SetRating(i)
	return ruo
}

// AddRating adds i to rating.
func (ruo *RatingUpdateOne) AddRating(i int) *RatingUpdateOne {
	ruo.mutation.AddRating(i)
	return ruo
}

// SetCustomerID sets the customer edge to Customer by id.
func (ruo *RatingUpdateOne) SetCustomerID(id int) *RatingUpdateOne {
	ruo.mutation.SetCustomerID(id)
	return ruo
}

// SetNillableCustomerID sets the customer edge to Customer by id if the given value is not nil.
func (ruo *RatingUpdateOne) SetNillableCustomerID(id *int) *RatingUpdateOne {
	if id != nil {
		ruo = ruo.SetCustomerID(*id)
	}
	return ruo
}

// SetCustomer sets the customer edge to Customer.
func (ruo *RatingUpdateOne) SetCustomer(c *Customer) *RatingUpdateOne {
	return ruo.SetCustomerID(c.ID)
}

// SetProductID sets the product edge to Product by id.
func (ruo *RatingUpdateOne) SetProductID(id int) *RatingUpdateOne {
	ruo.mutation.SetProductID(id)
	return ruo
}

// SetNillableProductID sets the product edge to Product by id if the given value is not nil.
func (ruo *RatingUpdateOne) SetNillableProductID(id *int) *RatingUpdateOne {
	if id != nil {
		ruo = ruo.SetProductID(*id)
	}
	return ruo
}

// SetProduct sets the product edge to Product.
func (ruo *RatingUpdateOne) SetProduct(p *Product) *RatingUpdateOne {
	return ruo.SetProductID(p.ID)
}

// Mutation returns the RatingMutation object of the builder.
func (ruo *RatingUpdateOne) Mutation() *RatingMutation {
	return ruo.mutation
}

// ClearCustomer clears the "customer" edge to type Customer.
func (ruo *RatingUpdateOne) ClearCustomer() *RatingUpdateOne {
	ruo.mutation.ClearCustomer()
	return ruo
}

// ClearProduct clears the "product" edge to type Product.
func (ruo *RatingUpdateOne) ClearProduct() *RatingUpdateOne {
	ruo.mutation.ClearProduct()
	return ruo
}

// Save executes the query and returns the updated entity.
func (ruo *RatingUpdateOne) Save(ctx context.Context) (*Rating, error) {
	var (
		err  error
		node *Rating
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RatingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RatingUpdateOne) SaveX(ctx context.Context) *Rating {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RatingUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RatingUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RatingUpdateOne) sqlSave(ctx context.Context) (_node *Rating, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rating.Table,
			Columns: rating.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rating.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Rating.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ruo.mutation.Comment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rating.FieldComment,
		})
	}
	if value, ok := ruo.mutation.Rating(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rating.FieldRating,
		})
	}
	if value, ok := ruo.mutation.AddedRating(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: rating.FieldRating,
		})
	}
	if ruo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rating.CustomerTable,
			Columns: []string{rating.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rating.CustomerTable,
			Columns: []string{rating.CustomerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: customer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rating.ProductTable,
			Columns: []string{rating.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rating.ProductTable,
			Columns: []string{rating.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Rating{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rating.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
