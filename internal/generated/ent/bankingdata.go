// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"foodworks.ml/m/internal/generated/ent/bankingdata"
	"github.com/facebook/ent/dialect/sql"
)

// BankingData is the model entity for the BankingData schema.
type BankingData struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// BankAccount holds the value of the "bank_account" field.
	BankAccount string `json:"bank_account,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BankingData) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // bank_account
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BankingData fields.
func (bd *BankingData) assignValues(values ...interface{}) error {
	if m, n := len(values), len(bankingdata.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	bd.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field bank_account", values[0])
	} else if value.Valid {
		bd.BankAccount = value.String
	}
	return nil
}

// Update returns a builder for updating this BankingData.
// Note that, you need to call BankingData.Unwrap() before calling this method, if this BankingData
// was returned from a transaction, and the transaction was committed or rolled back.
func (bd *BankingData) Update() *BankingDataUpdateOne {
	return (&BankingDataClient{config: bd.config}).UpdateOne(bd)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (bd *BankingData) Unwrap() *BankingData {
	tx, ok := bd.config.driver.(*txDriver)
	if !ok {
		panic("ent: BankingData is not a transactional entity")
	}
	bd.config.driver = tx.drv
	return bd
}

// String implements the fmt.Stringer.
func (bd *BankingData) String() string {
	var builder strings.Builder
	builder.WriteString("BankingData(")
	builder.WriteString(fmt.Sprintf("id=%v", bd.ID))
	builder.WriteString(", bank_account=")
	builder.WriteString(bd.BankAccount)
	builder.WriteByte(')')
	return builder.String()
}

// BankingDataSlice is a parsable slice of BankingData.
type BankingDataSlice []*BankingData

func (bd BankingDataSlice) config(cfg config) {
	for _i := range bd {
		bd[_i].config = cfg
	}
}
