// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"foodworks.ml/m/internal/generated/ent/address"
	"foodworks.ml/m/internal/generated/ent/imagepath"
	"foodworks.ml/m/internal/generated/ent/predicate"
	"foodworks.ml/m/internal/generated/ent/product"
	"foodworks.ml/m/internal/generated/ent/restaurant"
	"foodworks.ml/m/internal/generated/ent/restaurantowner"
	"foodworks.ml/m/internal/generated/ent/tag"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// RestaurantUpdate is the builder for updating Restaurant entities.
type RestaurantUpdate struct {
	config
	hooks      []Hook
	mutation   *RestaurantMutation
	predicates []predicate.Restaurant
}

// Where adds a new predicate for the builder.
func (ru *RestaurantUpdate) Where(ps ...predicate.Restaurant) *RestaurantUpdate {
	ru.predicates = append(ru.predicates, ps...)
	return ru
}

// SetName sets the name field.
func (ru *RestaurantUpdate) SetName(s string) *RestaurantUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetDescription sets the description field.
func (ru *RestaurantUpdate) SetDescription(s string) *RestaurantUpdate {
	ru.mutation.SetDescription(s)
	return ru
}

// SetNillableDescription sets the description field if the given value is not nil.
func (ru *RestaurantUpdate) SetNillableDescription(s *string) *RestaurantUpdate {
	if s != nil {
		ru.SetDescription(*s)
	}
	return ru
}

// ClearDescription clears the value of description.
func (ru *RestaurantUpdate) ClearDescription() *RestaurantUpdate {
	ru.mutation.ClearDescription()
	return ru
}

// SetAddressID sets the address edge to Address by id.
func (ru *RestaurantUpdate) SetAddressID(id int) *RestaurantUpdate {
	ru.mutation.SetAddressID(id)
	return ru
}

// SetNillableAddressID sets the address edge to Address by id if the given value is not nil.
func (ru *RestaurantUpdate) SetNillableAddressID(id *int) *RestaurantUpdate {
	if id != nil {
		ru = ru.SetAddressID(*id)
	}
	return ru
}

// SetAddress sets the address edge to Address.
func (ru *RestaurantUpdate) SetAddress(a *Address) *RestaurantUpdate {
	return ru.SetAddressID(a.ID)
}

// AddTagIDs adds the tags edge to Tag by ids.
func (ru *RestaurantUpdate) AddTagIDs(ids ...int) *RestaurantUpdate {
	ru.mutation.AddTagIDs(ids...)
	return ru
}

// AddTags adds the tags edges to Tag.
func (ru *RestaurantUpdate) AddTags(t ...*Tag) *RestaurantUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ru.AddTagIDs(ids...)
}

// AddOwnerIDs adds the owner edge to RestaurantOwner by ids.
func (ru *RestaurantUpdate) AddOwnerIDs(ids ...int) *RestaurantUpdate {
	ru.mutation.AddOwnerIDs(ids...)
	return ru
}

// AddOwner adds the owner edges to RestaurantOwner.
func (ru *RestaurantUpdate) AddOwner(r ...*RestaurantOwner) *RestaurantUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddOwnerIDs(ids...)
}

// AddProductIDs adds the products edge to Product by ids.
func (ru *RestaurantUpdate) AddProductIDs(ids ...int) *RestaurantUpdate {
	ru.mutation.AddProductIDs(ids...)
	return ru
}

// AddProducts adds the products edges to Product.
func (ru *RestaurantUpdate) AddProducts(p ...*Product) *RestaurantUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.AddProductIDs(ids...)
}

// AddImageIDs adds the images edge to ImagePath by ids.
func (ru *RestaurantUpdate) AddImageIDs(ids ...int) *RestaurantUpdate {
	ru.mutation.AddImageIDs(ids...)
	return ru
}

// AddImages adds the images edges to ImagePath.
func (ru *RestaurantUpdate) AddImages(i ...*ImagePath) *RestaurantUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ru.AddImageIDs(ids...)
}

// Mutation returns the RestaurantMutation object of the builder.
func (ru *RestaurantUpdate) Mutation() *RestaurantMutation {
	return ru.mutation
}

// ClearAddress clears the "address" edge to type Address.
func (ru *RestaurantUpdate) ClearAddress() *RestaurantUpdate {
	ru.mutation.ClearAddress()
	return ru
}

// ClearTags clears all "tags" edges to type Tag.
func (ru *RestaurantUpdate) ClearTags() *RestaurantUpdate {
	ru.mutation.ClearTags()
	return ru
}

// RemoveTagIDs removes the tags edge to Tag by ids.
func (ru *RestaurantUpdate) RemoveTagIDs(ids ...int) *RestaurantUpdate {
	ru.mutation.RemoveTagIDs(ids...)
	return ru
}

// RemoveTags removes tags edges to Tag.
func (ru *RestaurantUpdate) RemoveTags(t ...*Tag) *RestaurantUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ru.RemoveTagIDs(ids...)
}

// ClearOwner clears all "owner" edges to type RestaurantOwner.
func (ru *RestaurantUpdate) ClearOwner() *RestaurantUpdate {
	ru.mutation.ClearOwner()
	return ru
}

// RemoveOwnerIDs removes the owner edge to RestaurantOwner by ids.
func (ru *RestaurantUpdate) RemoveOwnerIDs(ids ...int) *RestaurantUpdate {
	ru.mutation.RemoveOwnerIDs(ids...)
	return ru
}

// RemoveOwner removes owner edges to RestaurantOwner.
func (ru *RestaurantUpdate) RemoveOwner(r ...*RestaurantOwner) *RestaurantUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveOwnerIDs(ids...)
}

// ClearProducts clears all "products" edges to type Product.
func (ru *RestaurantUpdate) ClearProducts() *RestaurantUpdate {
	ru.mutation.ClearProducts()
	return ru
}

// RemoveProductIDs removes the products edge to Product by ids.
func (ru *RestaurantUpdate) RemoveProductIDs(ids ...int) *RestaurantUpdate {
	ru.mutation.RemoveProductIDs(ids...)
	return ru
}

// RemoveProducts removes products edges to Product.
func (ru *RestaurantUpdate) RemoveProducts(p ...*Product) *RestaurantUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.RemoveProductIDs(ids...)
}

// ClearImages clears all "images" edges to type ImagePath.
func (ru *RestaurantUpdate) ClearImages() *RestaurantUpdate {
	ru.mutation.ClearImages()
	return ru
}

// RemoveImageIDs removes the images edge to ImagePath by ids.
func (ru *RestaurantUpdate) RemoveImageIDs(ids ...int) *RestaurantUpdate {
	ru.mutation.RemoveImageIDs(ids...)
	return ru
}

// RemoveImages removes images edges to ImagePath.
func (ru *RestaurantUpdate) RemoveImages(i ...*ImagePath) *RestaurantUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ru.RemoveImageIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ru *RestaurantUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RestaurantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RestaurantUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RestaurantUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RestaurantUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RestaurantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   restaurant.Table,
			Columns: restaurant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: restaurant.FieldID,
			},
		},
	}
	if ps := ru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaurant.FieldName,
		})
	}
	if value, ok := ru.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaurant.FieldDescription,
		})
	}
	if ru.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: restaurant.FieldDescription,
		})
	}
	if ru.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   restaurant.AddressTable,
			Columns: []string{restaurant.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: address.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   restaurant.AddressTable,
			Columns: []string{restaurant.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: address.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   restaurant.TagsTable,
			Columns: restaurant.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedTagsIDs(); len(nodes) > 0 && !ru.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   restaurant.TagsTable,
			Columns: restaurant.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   restaurant.TagsTable,
			Columns: restaurant.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.OwnerTable,
			Columns: []string{restaurant.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurantowner.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedOwnerIDs(); len(nodes) > 0 && !ru.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.OwnerTable,
			Columns: []string{restaurant.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurantowner.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.OwnerTable,
			Columns: []string{restaurant.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurantowner.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   restaurant.ProductsTable,
			Columns: restaurant.ProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedProductsIDs(); len(nodes) > 0 && !ru.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   restaurant.ProductsTable,
			Columns: restaurant.ProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   restaurant.ProductsTable,
			Columns: restaurant.ProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   restaurant.ImagesTable,
			Columns: []string{restaurant.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: imagepath.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedImagesIDs(); len(nodes) > 0 && !ru.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   restaurant.ImagesTable,
			Columns: []string{restaurant.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: imagepath.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   restaurant.ImagesTable,
			Columns: []string{restaurant.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: imagepath.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{restaurant.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RestaurantUpdateOne is the builder for updating a single Restaurant entity.
type RestaurantUpdateOne struct {
	config
	hooks    []Hook
	mutation *RestaurantMutation
}

// SetName sets the name field.
func (ruo *RestaurantUpdateOne) SetName(s string) *RestaurantUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetDescription sets the description field.
func (ruo *RestaurantUpdateOne) SetDescription(s string) *RestaurantUpdateOne {
	ruo.mutation.SetDescription(s)
	return ruo
}

// SetNillableDescription sets the description field if the given value is not nil.
func (ruo *RestaurantUpdateOne) SetNillableDescription(s *string) *RestaurantUpdateOne {
	if s != nil {
		ruo.SetDescription(*s)
	}
	return ruo
}

// ClearDescription clears the value of description.
func (ruo *RestaurantUpdateOne) ClearDescription() *RestaurantUpdateOne {
	ruo.mutation.ClearDescription()
	return ruo
}

// SetAddressID sets the address edge to Address by id.
func (ruo *RestaurantUpdateOne) SetAddressID(id int) *RestaurantUpdateOne {
	ruo.mutation.SetAddressID(id)
	return ruo
}

// SetNillableAddressID sets the address edge to Address by id if the given value is not nil.
func (ruo *RestaurantUpdateOne) SetNillableAddressID(id *int) *RestaurantUpdateOne {
	if id != nil {
		ruo = ruo.SetAddressID(*id)
	}
	return ruo
}

// SetAddress sets the address edge to Address.
func (ruo *RestaurantUpdateOne) SetAddress(a *Address) *RestaurantUpdateOne {
	return ruo.SetAddressID(a.ID)
}

// AddTagIDs adds the tags edge to Tag by ids.
func (ruo *RestaurantUpdateOne) AddTagIDs(ids ...int) *RestaurantUpdateOne {
	ruo.mutation.AddTagIDs(ids...)
	return ruo
}

// AddTags adds the tags edges to Tag.
func (ruo *RestaurantUpdateOne) AddTags(t ...*Tag) *RestaurantUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ruo.AddTagIDs(ids...)
}

// AddOwnerIDs adds the owner edge to RestaurantOwner by ids.
func (ruo *RestaurantUpdateOne) AddOwnerIDs(ids ...int) *RestaurantUpdateOne {
	ruo.mutation.AddOwnerIDs(ids...)
	return ruo
}

// AddOwner adds the owner edges to RestaurantOwner.
func (ruo *RestaurantUpdateOne) AddOwner(r ...*RestaurantOwner) *RestaurantUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddOwnerIDs(ids...)
}

// AddProductIDs adds the products edge to Product by ids.
func (ruo *RestaurantUpdateOne) AddProductIDs(ids ...int) *RestaurantUpdateOne {
	ruo.mutation.AddProductIDs(ids...)
	return ruo
}

// AddProducts adds the products edges to Product.
func (ruo *RestaurantUpdateOne) AddProducts(p ...*Product) *RestaurantUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.AddProductIDs(ids...)
}

// AddImageIDs adds the images edge to ImagePath by ids.
func (ruo *RestaurantUpdateOne) AddImageIDs(ids ...int) *RestaurantUpdateOne {
	ruo.mutation.AddImageIDs(ids...)
	return ruo
}

// AddImages adds the images edges to ImagePath.
func (ruo *RestaurantUpdateOne) AddImages(i ...*ImagePath) *RestaurantUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ruo.AddImageIDs(ids...)
}

// Mutation returns the RestaurantMutation object of the builder.
func (ruo *RestaurantUpdateOne) Mutation() *RestaurantMutation {
	return ruo.mutation
}

// ClearAddress clears the "address" edge to type Address.
func (ruo *RestaurantUpdateOne) ClearAddress() *RestaurantUpdateOne {
	ruo.mutation.ClearAddress()
	return ruo
}

// ClearTags clears all "tags" edges to type Tag.
func (ruo *RestaurantUpdateOne) ClearTags() *RestaurantUpdateOne {
	ruo.mutation.ClearTags()
	return ruo
}

// RemoveTagIDs removes the tags edge to Tag by ids.
func (ruo *RestaurantUpdateOne) RemoveTagIDs(ids ...int) *RestaurantUpdateOne {
	ruo.mutation.RemoveTagIDs(ids...)
	return ruo
}

// RemoveTags removes tags edges to Tag.
func (ruo *RestaurantUpdateOne) RemoveTags(t ...*Tag) *RestaurantUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ruo.RemoveTagIDs(ids...)
}

// ClearOwner clears all "owner" edges to type RestaurantOwner.
func (ruo *RestaurantUpdateOne) ClearOwner() *RestaurantUpdateOne {
	ruo.mutation.ClearOwner()
	return ruo
}

// RemoveOwnerIDs removes the owner edge to RestaurantOwner by ids.
func (ruo *RestaurantUpdateOne) RemoveOwnerIDs(ids ...int) *RestaurantUpdateOne {
	ruo.mutation.RemoveOwnerIDs(ids...)
	return ruo
}

// RemoveOwner removes owner edges to RestaurantOwner.
func (ruo *RestaurantUpdateOne) RemoveOwner(r ...*RestaurantOwner) *RestaurantUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveOwnerIDs(ids...)
}

// ClearProducts clears all "products" edges to type Product.
func (ruo *RestaurantUpdateOne) ClearProducts() *RestaurantUpdateOne {
	ruo.mutation.ClearProducts()
	return ruo
}

// RemoveProductIDs removes the products edge to Product by ids.
func (ruo *RestaurantUpdateOne) RemoveProductIDs(ids ...int) *RestaurantUpdateOne {
	ruo.mutation.RemoveProductIDs(ids...)
	return ruo
}

// RemoveProducts removes products edges to Product.
func (ruo *RestaurantUpdateOne) RemoveProducts(p ...*Product) *RestaurantUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.RemoveProductIDs(ids...)
}

// ClearImages clears all "images" edges to type ImagePath.
func (ruo *RestaurantUpdateOne) ClearImages() *RestaurantUpdateOne {
	ruo.mutation.ClearImages()
	return ruo
}

// RemoveImageIDs removes the images edge to ImagePath by ids.
func (ruo *RestaurantUpdateOne) RemoveImageIDs(ids ...int) *RestaurantUpdateOne {
	ruo.mutation.RemoveImageIDs(ids...)
	return ruo
}

// RemoveImages removes images edges to ImagePath.
func (ruo *RestaurantUpdateOne) RemoveImages(i ...*ImagePath) *RestaurantUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ruo.RemoveImageIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (ruo *RestaurantUpdateOne) Save(ctx context.Context) (*Restaurant, error) {
	var (
		err  error
		node *Restaurant
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RestaurantMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RestaurantUpdateOne) SaveX(ctx context.Context) *Restaurant {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RestaurantUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RestaurantUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RestaurantUpdateOne) sqlSave(ctx context.Context) (_node *Restaurant, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   restaurant.Table,
			Columns: restaurant.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: restaurant.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Restaurant.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaurant.FieldName,
		})
	}
	if value, ok := ruo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaurant.FieldDescription,
		})
	}
	if ruo.mutation.DescriptionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: restaurant.FieldDescription,
		})
	}
	if ruo.mutation.AddressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   restaurant.AddressTable,
			Columns: []string{restaurant.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: address.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.AddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   restaurant.AddressTable,
			Columns: []string{restaurant.AddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: address.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   restaurant.TagsTable,
			Columns: restaurant.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !ruo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   restaurant.TagsTable,
			Columns: restaurant.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   restaurant.TagsTable,
			Columns: restaurant.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.OwnerTable,
			Columns: []string{restaurant.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurantowner.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedOwnerIDs(); len(nodes) > 0 && !ruo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.OwnerTable,
			Columns: []string{restaurant.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurantowner.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   restaurant.OwnerTable,
			Columns: []string{restaurant.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurantowner.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   restaurant.ProductsTable,
			Columns: restaurant.ProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedProductsIDs(); len(nodes) > 0 && !ruo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   restaurant.ProductsTable,
			Columns: restaurant.ProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   restaurant.ProductsTable,
			Columns: restaurant.ProductsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   restaurant.ImagesTable,
			Columns: []string{restaurant.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: imagepath.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedImagesIDs(); len(nodes) > 0 && !ruo.mutation.ImagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   restaurant.ImagesTable,
			Columns: []string{restaurant.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: imagepath.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ImagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   restaurant.ImagesTable,
			Columns: []string{restaurant.ImagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: imagepath.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Restaurant{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{restaurant.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
