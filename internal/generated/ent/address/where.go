// Code generated by entc, DO NOT EDIT.

package address

import (
	"foodworks.ml/m/internal/generated/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Latitude applies equality check predicate on the "latitude" field. It's identical to LatitudeEQ.
func Latitude(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLatitude), v))
	})
}

// Longitude applies equality check predicate on the "longitude" field. It's identical to LongitudeEQ.
func Longitude(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLongitude), v))
	})
}

// StreetLine applies equality check predicate on the "streetLine" field. It's identical to StreetLineEQ.
func StreetLine(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStreetLine), v))
	})
}

// LatitudeEQ applies the EQ predicate on the "latitude" field.
func LatitudeEQ(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLatitude), v))
	})
}

// LatitudeNEQ applies the NEQ predicate on the "latitude" field.
func LatitudeNEQ(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLatitude), v))
	})
}

// LatitudeIn applies the In predicate on the "latitude" field.
func LatitudeIn(vs ...string) predicate.Address {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Address(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLatitude), v...))
	})
}

// LatitudeNotIn applies the NotIn predicate on the "latitude" field.
func LatitudeNotIn(vs ...string) predicate.Address {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Address(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLatitude), v...))
	})
}

// LatitudeGT applies the GT predicate on the "latitude" field.
func LatitudeGT(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLatitude), v))
	})
}

// LatitudeGTE applies the GTE predicate on the "latitude" field.
func LatitudeGTE(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLatitude), v))
	})
}

// LatitudeLT applies the LT predicate on the "latitude" field.
func LatitudeLT(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLatitude), v))
	})
}

// LatitudeLTE applies the LTE predicate on the "latitude" field.
func LatitudeLTE(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLatitude), v))
	})
}

// LatitudeContains applies the Contains predicate on the "latitude" field.
func LatitudeContains(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLatitude), v))
	})
}

// LatitudeHasPrefix applies the HasPrefix predicate on the "latitude" field.
func LatitudeHasPrefix(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLatitude), v))
	})
}

// LatitudeHasSuffix applies the HasSuffix predicate on the "latitude" field.
func LatitudeHasSuffix(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLatitude), v))
	})
}

// LatitudeEqualFold applies the EqualFold predicate on the "latitude" field.
func LatitudeEqualFold(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLatitude), v))
	})
}

// LatitudeContainsFold applies the ContainsFold predicate on the "latitude" field.
func LatitudeContainsFold(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLatitude), v))
	})
}

// LongitudeEQ applies the EQ predicate on the "longitude" field.
func LongitudeEQ(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLongitude), v))
	})
}

// LongitudeNEQ applies the NEQ predicate on the "longitude" field.
func LongitudeNEQ(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLongitude), v))
	})
}

// LongitudeIn applies the In predicate on the "longitude" field.
func LongitudeIn(vs ...string) predicate.Address {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Address(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLongitude), v...))
	})
}

// LongitudeNotIn applies the NotIn predicate on the "longitude" field.
func LongitudeNotIn(vs ...string) predicate.Address {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Address(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLongitude), v...))
	})
}

// LongitudeGT applies the GT predicate on the "longitude" field.
func LongitudeGT(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLongitude), v))
	})
}

// LongitudeGTE applies the GTE predicate on the "longitude" field.
func LongitudeGTE(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLongitude), v))
	})
}

// LongitudeLT applies the LT predicate on the "longitude" field.
func LongitudeLT(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLongitude), v))
	})
}

// LongitudeLTE applies the LTE predicate on the "longitude" field.
func LongitudeLTE(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLongitude), v))
	})
}

// LongitudeContains applies the Contains predicate on the "longitude" field.
func LongitudeContains(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLongitude), v))
	})
}

// LongitudeHasPrefix applies the HasPrefix predicate on the "longitude" field.
func LongitudeHasPrefix(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLongitude), v))
	})
}

// LongitudeHasSuffix applies the HasSuffix predicate on the "longitude" field.
func LongitudeHasSuffix(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLongitude), v))
	})
}

// LongitudeEqualFold applies the EqualFold predicate on the "longitude" field.
func LongitudeEqualFold(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLongitude), v))
	})
}

// LongitudeContainsFold applies the ContainsFold predicate on the "longitude" field.
func LongitudeContainsFold(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLongitude), v))
	})
}

// StreetLineEQ applies the EQ predicate on the "streetLine" field.
func StreetLineEQ(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStreetLine), v))
	})
}

// StreetLineNEQ applies the NEQ predicate on the "streetLine" field.
func StreetLineNEQ(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStreetLine), v))
	})
}

// StreetLineIn applies the In predicate on the "streetLine" field.
func StreetLineIn(vs ...string) predicate.Address {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Address(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStreetLine), v...))
	})
}

// StreetLineNotIn applies the NotIn predicate on the "streetLine" field.
func StreetLineNotIn(vs ...string) predicate.Address {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Address(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStreetLine), v...))
	})
}

// StreetLineGT applies the GT predicate on the "streetLine" field.
func StreetLineGT(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStreetLine), v))
	})
}

// StreetLineGTE applies the GTE predicate on the "streetLine" field.
func StreetLineGTE(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStreetLine), v))
	})
}

// StreetLineLT applies the LT predicate on the "streetLine" field.
func StreetLineLT(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStreetLine), v))
	})
}

// StreetLineLTE applies the LTE predicate on the "streetLine" field.
func StreetLineLTE(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStreetLine), v))
	})
}

// StreetLineContains applies the Contains predicate on the "streetLine" field.
func StreetLineContains(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStreetLine), v))
	})
}

// StreetLineHasPrefix applies the HasPrefix predicate on the "streetLine" field.
func StreetLineHasPrefix(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStreetLine), v))
	})
}

// StreetLineHasSuffix applies the HasSuffix predicate on the "streetLine" field.
func StreetLineHasSuffix(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStreetLine), v))
	})
}

// StreetLineEqualFold applies the EqualFold predicate on the "streetLine" field.
func StreetLineEqualFold(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStreetLine), v))
	})
}

// StreetLineContainsFold applies the ContainsFold predicate on the "streetLine" field.
func StreetLineContainsFold(v string) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStreetLine), v))
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Address) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Address) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Address) predicate.Address {
	return predicate.Address(func(s *sql.Selector) {
		p(s.Not())
	})
}
