// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"foodworks.ml/m/internal/generated/ent/imagepath"
	"foodworks.ml/m/internal/generated/ent/product"
	"foodworks.ml/m/internal/generated/ent/restaurant"
	"foodworks.ml/m/internal/generated/ent/tag"
	"github.com/facebook/ent/dialect/sql"
)

// ImagePath is the model entity for the ImagePath schema.
type ImagePath struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ImagePathQuery when eager-loading is set.
	Edges             ImagePathEdges `json:"edges"`
	product_images    *int
	restaurant_images *int
	tag_images        *int
}

// ImagePathEdges holds the relations/edges for other nodes in the graph.
type ImagePathEdges struct {
	// Product holds the value of the product edge.
	Product *Product
	// Restaurant holds the value of the restaurant edge.
	Restaurant *Restaurant
	// Tag holds the value of the tag edge.
	Tag *Tag
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImagePathEdges) ProductOrErr() (*Product, error) {
	if e.loadedTypes[0] {
		if e.Product == nil {
			// The edge product was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// RestaurantOrErr returns the Restaurant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImagePathEdges) RestaurantOrErr() (*Restaurant, error) {
	if e.loadedTypes[1] {
		if e.Restaurant == nil {
			// The edge restaurant was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: restaurant.Label}
		}
		return e.Restaurant, nil
	}
	return nil, &NotLoadedError{edge: "restaurant"}
}

// TagOrErr returns the Tag value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ImagePathEdges) TagOrErr() (*Tag, error) {
	if e.loadedTypes[2] {
		if e.Tag == nil {
			// The edge tag was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tag.Label}
		}
		return e.Tag, nil
	}
	return nil, &NotLoadedError{edge: "tag"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ImagePath) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // path
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*ImagePath) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // product_images
		&sql.NullInt64{}, // restaurant_images
		&sql.NullInt64{}, // tag_images
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ImagePath fields.
func (ip *ImagePath) assignValues(values ...interface{}) error {
	if m, n := len(values), len(imagepath.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ip.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field path", values[0])
	} else if value.Valid {
		ip.Path = value.String
	}
	values = values[1:]
	if len(values) == len(imagepath.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field product_images", value)
		} else if value.Valid {
			ip.product_images = new(int)
			*ip.product_images = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field restaurant_images", value)
		} else if value.Valid {
			ip.restaurant_images = new(int)
			*ip.restaurant_images = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field tag_images", value)
		} else if value.Valid {
			ip.tag_images = new(int)
			*ip.tag_images = int(value.Int64)
		}
	}
	return nil
}

// QueryProduct queries the product edge of the ImagePath.
func (ip *ImagePath) QueryProduct() *ProductQuery {
	return (&ImagePathClient{config: ip.config}).QueryProduct(ip)
}

// QueryRestaurant queries the restaurant edge of the ImagePath.
func (ip *ImagePath) QueryRestaurant() *RestaurantQuery {
	return (&ImagePathClient{config: ip.config}).QueryRestaurant(ip)
}

// QueryTag queries the tag edge of the ImagePath.
func (ip *ImagePath) QueryTag() *TagQuery {
	return (&ImagePathClient{config: ip.config}).QueryTag(ip)
}

// Update returns a builder for updating this ImagePath.
// Note that, you need to call ImagePath.Unwrap() before calling this method, if this ImagePath
// was returned from a transaction, and the transaction was committed or rolled back.
func (ip *ImagePath) Update() *ImagePathUpdateOne {
	return (&ImagePathClient{config: ip.config}).UpdateOne(ip)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ip *ImagePath) Unwrap() *ImagePath {
	tx, ok := ip.config.driver.(*txDriver)
	if !ok {
		panic("ent: ImagePath is not a transactional entity")
	}
	ip.config.driver = tx.drv
	return ip
}

// String implements the fmt.Stringer.
func (ip *ImagePath) String() string {
	var builder strings.Builder
	builder.WriteString("ImagePath(")
	builder.WriteString(fmt.Sprintf("id=%v", ip.ID))
	builder.WriteString(", path=")
	builder.WriteString(ip.Path)
	builder.WriteByte(')')
	return builder.String()
}

// ImagePaths is a parsable slice of ImagePath.
type ImagePaths []*ImagePath

func (ip ImagePaths) config(cfg config) {
	for _i := range ip {
		ip[_i].config = cfg
	}
}
