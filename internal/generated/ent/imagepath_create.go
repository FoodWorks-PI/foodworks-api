// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"foodworks.ml/m/internal/generated/ent/imagepath"
	"foodworks.ml/m/internal/generated/ent/product"
	"foodworks.ml/m/internal/generated/ent/restaurant"
	"foodworks.ml/m/internal/generated/ent/tag"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// ImagePathCreate is the builder for creating a ImagePath entity.
type ImagePathCreate struct {
	config
	mutation *ImagePathMutation
	hooks    []Hook
}

// SetPath sets the path field.
func (ipc *ImagePathCreate) SetPath(s string) *ImagePathCreate {
	ipc.mutation.SetPath(s)
	return ipc
}

// SetProductID sets the product edge to Product by id.
func (ipc *ImagePathCreate) SetProductID(id int) *ImagePathCreate {
	ipc.mutation.SetProductID(id)
	return ipc
}

// SetNillableProductID sets the product edge to Product by id if the given value is not nil.
func (ipc *ImagePathCreate) SetNillableProductID(id *int) *ImagePathCreate {
	if id != nil {
		ipc = ipc.SetProductID(*id)
	}
	return ipc
}

// SetProduct sets the product edge to Product.
func (ipc *ImagePathCreate) SetProduct(p *Product) *ImagePathCreate {
	return ipc.SetProductID(p.ID)
}

// SetRestaurantID sets the restaurant edge to Restaurant by id.
func (ipc *ImagePathCreate) SetRestaurantID(id int) *ImagePathCreate {
	ipc.mutation.SetRestaurantID(id)
	return ipc
}

// SetNillableRestaurantID sets the restaurant edge to Restaurant by id if the given value is not nil.
func (ipc *ImagePathCreate) SetNillableRestaurantID(id *int) *ImagePathCreate {
	if id != nil {
		ipc = ipc.SetRestaurantID(*id)
	}
	return ipc
}

// SetRestaurant sets the restaurant edge to Restaurant.
func (ipc *ImagePathCreate) SetRestaurant(r *Restaurant) *ImagePathCreate {
	return ipc.SetRestaurantID(r.ID)
}

// SetTagID sets the tag edge to Tag by id.
func (ipc *ImagePathCreate) SetTagID(id int) *ImagePathCreate {
	ipc.mutation.SetTagID(id)
	return ipc
}

// SetNillableTagID sets the tag edge to Tag by id if the given value is not nil.
func (ipc *ImagePathCreate) SetNillableTagID(id *int) *ImagePathCreate {
	if id != nil {
		ipc = ipc.SetTagID(*id)
	}
	return ipc
}

// SetTag sets the tag edge to Tag.
func (ipc *ImagePathCreate) SetTag(t *Tag) *ImagePathCreate {
	return ipc.SetTagID(t.ID)
}

// Mutation returns the ImagePathMutation object of the builder.
func (ipc *ImagePathCreate) Mutation() *ImagePathMutation {
	return ipc.mutation
}

// Save creates the ImagePath in the database.
func (ipc *ImagePathCreate) Save(ctx context.Context) (*ImagePath, error) {
	var (
		err  error
		node *ImagePath
	)
	if len(ipc.hooks) == 0 {
		if err = ipc.check(); err != nil {
			return nil, err
		}
		node, err = ipc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ImagePathMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ipc.check(); err != nil {
				return nil, err
			}
			ipc.mutation = mutation
			node, err = ipc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ipc.hooks) - 1; i >= 0; i-- {
			mut = ipc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ipc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ipc *ImagePathCreate) SaveX(ctx context.Context) *ImagePath {
	v, err := ipc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (ipc *ImagePathCreate) check() error {
	if _, ok := ipc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New("ent: missing required field \"path\"")}
	}
	return nil
}

func (ipc *ImagePathCreate) sqlSave(ctx context.Context) (*ImagePath, error) {
	_node, _spec := ipc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ipc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ipc *ImagePathCreate) createSpec() (*ImagePath, *sqlgraph.CreateSpec) {
	var (
		_node = &ImagePath{config: ipc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: imagepath.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: imagepath.FieldID,
			},
		}
	)
	if value, ok := ipc.mutation.Path(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: imagepath.FieldPath,
		})
		_node.Path = value
	}
	if nodes := ipc.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imagepath.ProductTable,
			Columns: []string{imagepath.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ipc.mutation.RestaurantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imagepath.RestaurantTable,
			Columns: []string{imagepath.RestaurantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ipc.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imagepath.TagTable,
			Columns: []string{imagepath.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ImagePathCreateBulk is the builder for creating a bulk of ImagePath entities.
type ImagePathCreateBulk struct {
	config
	builders []*ImagePathCreate
}

// Save creates the ImagePath entities in the database.
func (ipcb *ImagePathCreateBulk) Save(ctx context.Context) ([]*ImagePath, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ipcb.builders))
	nodes := make([]*ImagePath, len(ipcb.builders))
	mutators := make([]Mutator, len(ipcb.builders))
	for i := range ipcb.builders {
		func(i int, root context.Context) {
			builder := ipcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ImagePathMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ipcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ipcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ipcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (ipcb *ImagePathCreateBulk) SaveX(ctx context.Context) []*ImagePath {
	v, err := ipcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
