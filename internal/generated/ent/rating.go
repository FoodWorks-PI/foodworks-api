// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"foodworks.ml/m/internal/generated/ent/rating"
	"github.com/facebook/ent/dialect/sql"
)

// Rating is the model entity for the Rating schema.
type Rating struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ProductRate holds the value of the "ProductRate" field.
	ProductRate int `json:"ProductRate,omitempty"`
	// ProductID holds the value of the "ProductID" field.
	ProductID int `json:"ProductID,omitempty"`
	// CustomerID holds the value of the "CustomerID" field.
	CustomerID int `json:"CustomerID,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Rating) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullInt64{}, // ProductRate
		&sql.NullInt64{}, // ProductID
		&sql.NullInt64{}, // CustomerID
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Rating fields.
func (r *Rating) assignValues(values ...interface{}) error {
	if m, n := len(values), len(rating.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field ProductRate", values[0])
	} else if value.Valid {
		r.ProductRate = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field ProductID", values[1])
	} else if value.Valid {
		r.ProductID = int(value.Int64)
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field CustomerID", values[2])
	} else if value.Valid {
		r.CustomerID = int(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this Rating.
// Note that, you need to call Rating.Unwrap() before calling this method, if this Rating
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Rating) Update() *RatingUpdateOne {
	return (&RatingClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Rating) Unwrap() *Rating {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Rating is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Rating) String() string {
	var builder strings.Builder
	builder.WriteString("Rating(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", ProductRate=")
	builder.WriteString(fmt.Sprintf("%v", r.ProductRate))
	builder.WriteString(", ProductID=")
	builder.WriteString(fmt.Sprintf("%v", r.ProductID))
	builder.WriteString(", CustomerID=")
	builder.WriteString(fmt.Sprintf("%v", r.CustomerID))
	builder.WriteByte(')')
	return builder.String()
}

// Ratings is a parsable slice of Rating.
type Ratings []*Rating

func (r Ratings) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
