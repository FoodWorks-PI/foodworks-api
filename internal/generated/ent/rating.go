// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"foodworks.ml/m/internal/generated/ent/customer"
	"foodworks.ml/m/internal/generated/ent/product"
	"foodworks.ml/m/internal/generated/ent/rating"
	"github.com/facebook/ent/dialect/sql"
)

// Rating is the model entity for the Rating schema.
type Rating struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment,omitempty"`
	// Rating holds the value of the "rating" field.
	Rating int `json:"rating,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RatingQuery when eager-loading is set.
	Edges            RatingEdges `json:"edges"`
	customer_ratings *int
	product_ratings  *int
}

// RatingEdges holds the relations/edges for other nodes in the graph.
type RatingEdges struct {
	// Customer holds the value of the customer edge.
	Customer *Customer
	// Product holds the value of the product edge.
	Product *Product
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RatingEdges) CustomerOrErr() (*Customer, error) {
	if e.loadedTypes[0] {
		if e.Customer == nil {
			// The edge customer was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: customer.Label}
		}
		return e.Customer, nil
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// ProductOrErr returns the Product value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RatingEdges) ProductOrErr() (*Product, error) {
	if e.loadedTypes[1] {
		if e.Product == nil {
			// The edge product was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: product.Label}
		}
		return e.Product, nil
	}
	return nil, &NotLoadedError{edge: "product"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Rating) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // comment
		&sql.NullInt64{},  // rating
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Rating) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // customer_ratings
		&sql.NullInt64{}, // product_ratings
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Rating fields.
func (r *Rating) assignValues(values ...interface{}) error {
	if m, n := len(values), len(rating.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field comment", values[0])
	} else if value.Valid {
		r.Comment = value.String
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field rating", values[1])
	} else if value.Valid {
		r.Rating = int(value.Int64)
	}
	values = values[2:]
	if len(values) == len(rating.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field customer_ratings", value)
		} else if value.Valid {
			r.customer_ratings = new(int)
			*r.customer_ratings = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field product_ratings", value)
		} else if value.Valid {
			r.product_ratings = new(int)
			*r.product_ratings = int(value.Int64)
		}
	}
	return nil
}

// QueryCustomer queries the customer edge of the Rating.
func (r *Rating) QueryCustomer() *CustomerQuery {
	return (&RatingClient{config: r.config}).QueryCustomer(r)
}

// QueryProduct queries the product edge of the Rating.
func (r *Rating) QueryProduct() *ProductQuery {
	return (&RatingClient{config: r.config}).QueryProduct(r)
}

// Update returns a builder for updating this Rating.
// Note that, you need to call Rating.Unwrap() before calling this method, if this Rating
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Rating) Update() *RatingUpdateOne {
	return (&RatingClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Rating) Unwrap() *Rating {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Rating is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Rating) String() string {
	var builder strings.Builder
	builder.WriteString("Rating(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", comment=")
	builder.WriteString(r.Comment)
	builder.WriteString(", rating=")
	builder.WriteString(fmt.Sprintf("%v", r.Rating))
	builder.WriteByte(')')
	return builder.String()
}

// Ratings is a parsable slice of Rating.
type Ratings []*Rating

func (r Ratings) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
