// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"foodworks.ml/m/internal/generated/ent/bankingdata"
	"foodworks.ml/m/internal/generated/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// BankingDataUpdate is the builder for updating BankingData entities.
type BankingDataUpdate struct {
	config
	hooks      []Hook
	mutation   *BankingDataMutation
	predicates []predicate.BankingData
}

// Where adds a new predicate for the builder.
func (bdu *BankingDataUpdate) Where(ps ...predicate.BankingData) *BankingDataUpdate {
	bdu.predicates = append(bdu.predicates, ps...)
	return bdu
}

// SetBankAccount sets the bank_account field.
func (bdu *BankingDataUpdate) SetBankAccount(s string) *BankingDataUpdate {
	bdu.mutation.SetBankAccount(s)
	return bdu
}

// Mutation returns the BankingDataMutation object of the builder.
func (bdu *BankingDataUpdate) Mutation() *BankingDataMutation {
	return bdu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (bdu *BankingDataUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(bdu.hooks) == 0 {
		affected, err = bdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BankingDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bdu.mutation = mutation
			affected, err = bdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bdu.hooks) - 1; i >= 0; i-- {
			mut = bdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bdu *BankingDataUpdate) SaveX(ctx context.Context) int {
	affected, err := bdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bdu *BankingDataUpdate) Exec(ctx context.Context) error {
	_, err := bdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bdu *BankingDataUpdate) ExecX(ctx context.Context) {
	if err := bdu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bdu *BankingDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bankingdata.Table,
			Columns: bankingdata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bankingdata.FieldID,
			},
		},
	}
	if ps := bdu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bdu.mutation.BankAccount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bankingdata.FieldBankAccount,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bankingdata.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BankingDataUpdateOne is the builder for updating a single BankingData entity.
type BankingDataUpdateOne struct {
	config
	hooks    []Hook
	mutation *BankingDataMutation
}

// SetBankAccount sets the bank_account field.
func (bduo *BankingDataUpdateOne) SetBankAccount(s string) *BankingDataUpdateOne {
	bduo.mutation.SetBankAccount(s)
	return bduo
}

// Mutation returns the BankingDataMutation object of the builder.
func (bduo *BankingDataUpdateOne) Mutation() *BankingDataMutation {
	return bduo.mutation
}

// Save executes the query and returns the updated entity.
func (bduo *BankingDataUpdateOne) Save(ctx context.Context) (*BankingData, error) {
	var (
		err  error
		node *BankingData
	)
	if len(bduo.hooks) == 0 {
		node, err = bduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BankingDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bduo.mutation = mutation
			node, err = bduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bduo.hooks) - 1; i >= 0; i-- {
			mut = bduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (bduo *BankingDataUpdateOne) SaveX(ctx context.Context) *BankingData {
	node, err := bduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bduo *BankingDataUpdateOne) Exec(ctx context.Context) error {
	_, err := bduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bduo *BankingDataUpdateOne) ExecX(ctx context.Context) {
	if err := bduo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bduo *BankingDataUpdateOne) sqlSave(ctx context.Context) (_node *BankingData, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bankingdata.Table,
			Columns: bankingdata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bankingdata.FieldID,
			},
		},
	}
	id, ok := bduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing BankingData.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := bduo.mutation.BankAccount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bankingdata.FieldBankAccount,
		})
	}
	_node = &BankingData{config: bduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, bduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bankingdata.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
