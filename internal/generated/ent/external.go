// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/facebook/ent/dialect/sql"
)

func (a *AddressSelect) UnsafeSqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := a.UnsafeSqlQuery().Query()
	if err := a.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
func (a *AddressSelect) UnsafeSqlQuery() sql.Querier {
	selector := a.sql
	selector.Select(a.fields...)
	return selector
}
func (a *AddressSelect) UnsafeScan(ctx context.Context, v interface{}) error {
	query, err := a.path(ctx)
	if err != nil {
		return err
	}
	a.sql = query
	return a.UnsafeSqlScan(ctx, v)
}

func (pr *ProductSelect) UnsafeSqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := pr.UnsafeSqlQuery().Query()
	if err := pr.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
func (pr *ProductSelect) UnsafeSqlQuery() sql.Querier {
	selector := pr.sql
	selector.Select(pr.fields...)
	return selector
}
func (pr *ProductSelect) UnsafeScan(ctx context.Context, v interface{}) error {
	query, err := pr.path(ctx)
	if err != nil {
		return err
	}
	pr.sql = query
	return pr.UnsafeSqlScan(ctx, v)
}

func (r *RestaurantSelect) UnsafeSqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := r.UnsafeSqlQuery().Query()
	if err := r.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
func (r *RestaurantSelect) UnsafeSqlQuery() sql.Querier {
	selector := r.sql
	selector.Select(r.fields...)
	return selector
}
func (r *RestaurantSelect) UnsafeScan(ctx context.Context, v interface{}) error {
	query, err := r.path(ctx)
	if err != nil {
		return err
	}
	r.sql = query
	return r.UnsafeSqlScan(ctx, v)
}
