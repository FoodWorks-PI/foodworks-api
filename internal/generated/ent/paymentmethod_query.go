// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"foodworks.ml/m/internal/generated/ent/paymentmethod"
	"foodworks.ml/m/internal/generated/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// PaymentMethodQuery is the builder for querying PaymentMethod entities.
type PaymentMethodQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.PaymentMethod
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (pmq *PaymentMethodQuery) Where(ps ...predicate.PaymentMethod) *PaymentMethodQuery {
	pmq.predicates = append(pmq.predicates, ps...)
	return pmq
}

// Limit adds a limit step to the query.
func (pmq *PaymentMethodQuery) Limit(limit int) *PaymentMethodQuery {
	pmq.limit = &limit
	return pmq
}

// Offset adds an offset step to the query.
func (pmq *PaymentMethodQuery) Offset(offset int) *PaymentMethodQuery {
	pmq.offset = &offset
	return pmq
}

// Order adds an order step to the query.
func (pmq *PaymentMethodQuery) Order(o ...OrderFunc) *PaymentMethodQuery {
	pmq.order = append(pmq.order, o...)
	return pmq
}

// First returns the first PaymentMethod entity in the query. Returns *NotFoundError when no paymentmethod was found.
func (pmq *PaymentMethodQuery) First(ctx context.Context) (*PaymentMethod, error) {
	nodes, err := pmq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{paymentmethod.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pmq *PaymentMethodQuery) FirstX(ctx context.Context) *PaymentMethod {
	node, err := pmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PaymentMethod id in the query. Returns *NotFoundError when no id was found.
func (pmq *PaymentMethodQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pmq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{paymentmethod.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (pmq *PaymentMethodQuery) FirstXID(ctx context.Context) int {
	id, err := pmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only PaymentMethod entity in the query, returns an error if not exactly one entity was returned.
func (pmq *PaymentMethodQuery) Only(ctx context.Context) (*PaymentMethod, error) {
	nodes, err := pmq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{paymentmethod.Label}
	default:
		return nil, &NotSingularError{paymentmethod.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pmq *PaymentMethodQuery) OnlyX(ctx context.Context) *PaymentMethod {
	node, err := pmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only PaymentMethod id in the query, returns an error if not exactly one id was returned.
func (pmq *PaymentMethodQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = pmq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{paymentmethod.Label}
	default:
		err = &NotSingularError{paymentmethod.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pmq *PaymentMethodQuery) OnlyIDX(ctx context.Context) int {
	id, err := pmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PaymentMethods.
func (pmq *PaymentMethodQuery) All(ctx context.Context) ([]*PaymentMethod, error) {
	if err := pmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return pmq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (pmq *PaymentMethodQuery) AllX(ctx context.Context) []*PaymentMethod {
	nodes, err := pmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PaymentMethod ids.
func (pmq *PaymentMethodQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := pmq.Select(paymentmethod.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pmq *PaymentMethodQuery) IDsX(ctx context.Context) []int {
	ids, err := pmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pmq *PaymentMethodQuery) Count(ctx context.Context) (int, error) {
	if err := pmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return pmq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (pmq *PaymentMethodQuery) CountX(ctx context.Context) int {
	count, err := pmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pmq *PaymentMethodQuery) Exist(ctx context.Context) (bool, error) {
	if err := pmq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return pmq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (pmq *PaymentMethodQuery) ExistX(ctx context.Context) bool {
	exist, err := pmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pmq *PaymentMethodQuery) Clone() *PaymentMethodQuery {
	return &PaymentMethodQuery{
		config:     pmq.config,
		limit:      pmq.limit,
		offset:     pmq.offset,
		order:      append([]OrderFunc{}, pmq.order...),
		unique:     append([]string{}, pmq.unique...),
		predicates: append([]predicate.PaymentMethod{}, pmq.predicates...),
		// clone intermediate query.
		sql:  pmq.sql.Clone(),
		path: pmq.path,
	}
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Data string `json:"data,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PaymentMethod.Query().
//		GroupBy(paymentmethod.FieldData).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (pmq *PaymentMethodQuery) GroupBy(field string, fields ...string) *PaymentMethodGroupBy {
	group := &PaymentMethodGroupBy{config: pmq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := pmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return pmq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		Data string `json:"data,omitempty"`
//	}
//
//	client.PaymentMethod.Query().
//		Select(paymentmethod.FieldData).
//		Scan(ctx, &v)
//
func (pmq *PaymentMethodQuery) Select(field string, fields ...string) *PaymentMethodSelect {
	selector := &PaymentMethodSelect{config: pmq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := pmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return pmq.sqlQuery(), nil
	}
	return selector
}

func (pmq *PaymentMethodQuery) prepareQuery(ctx context.Context) error {
	if pmq.path != nil {
		prev, err := pmq.path(ctx)
		if err != nil {
			return err
		}
		pmq.sql = prev
	}
	return nil
}

func (pmq *PaymentMethodQuery) sqlAll(ctx context.Context) ([]*PaymentMethod, error) {
	var (
		nodes   = []*PaymentMethod{}
		withFKs = pmq.withFKs
		_spec   = pmq.querySpec()
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, paymentmethod.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &PaymentMethod{config: pmq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, pmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (pmq *PaymentMethodQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pmq.querySpec()
	return sqlgraph.CountNodes(ctx, pmq.driver, _spec)
}

func (pmq *PaymentMethodQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := pmq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (pmq *PaymentMethodQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   paymentmethod.Table,
			Columns: paymentmethod.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: paymentmethod.FieldID,
			},
		},
		From:   pmq.sql,
		Unique: true,
	}
	if ps := pmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pmq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pmq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, paymentmethod.ValidColumn)
			}
		}
	}
	return _spec
}

func (pmq *PaymentMethodQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(pmq.driver.Dialect())
	t1 := builder.Table(paymentmethod.Table)
	selector := builder.Select(t1.Columns(paymentmethod.Columns...)...).From(t1)
	if pmq.sql != nil {
		selector = pmq.sql
		selector.Select(selector.Columns(paymentmethod.Columns...)...)
	}
	for _, p := range pmq.predicates {
		p(selector)
	}
	for _, p := range pmq.order {
		p(selector, paymentmethod.ValidColumn)
	}
	if offset := pmq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pmq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PaymentMethodGroupBy is the builder for group-by PaymentMethod entities.
type PaymentMethodGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pmgb *PaymentMethodGroupBy) Aggregate(fns ...AggregateFunc) *PaymentMethodGroupBy {
	pmgb.fns = append(pmgb.fns, fns...)
	return pmgb
}

// Scan applies the group-by query and scan the result into the given value.
func (pmgb *PaymentMethodGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := pmgb.path(ctx)
	if err != nil {
		return err
	}
	pmgb.sql = query
	return pmgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (pmgb *PaymentMethodGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := pmgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (pmgb *PaymentMethodGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(pmgb.fields) > 1 {
		return nil, errors.New("ent: PaymentMethodGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := pmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (pmgb *PaymentMethodGroupBy) StringsX(ctx context.Context) []string {
	v, err := pmgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (pmgb *PaymentMethodGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = pmgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{paymentmethod.Label}
	default:
		err = fmt.Errorf("ent: PaymentMethodGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (pmgb *PaymentMethodGroupBy) StringX(ctx context.Context) string {
	v, err := pmgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (pmgb *PaymentMethodGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(pmgb.fields) > 1 {
		return nil, errors.New("ent: PaymentMethodGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := pmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (pmgb *PaymentMethodGroupBy) IntsX(ctx context.Context) []int {
	v, err := pmgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (pmgb *PaymentMethodGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = pmgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{paymentmethod.Label}
	default:
		err = fmt.Errorf("ent: PaymentMethodGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (pmgb *PaymentMethodGroupBy) IntX(ctx context.Context) int {
	v, err := pmgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (pmgb *PaymentMethodGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(pmgb.fields) > 1 {
		return nil, errors.New("ent: PaymentMethodGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := pmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (pmgb *PaymentMethodGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := pmgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (pmgb *PaymentMethodGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = pmgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{paymentmethod.Label}
	default:
		err = fmt.Errorf("ent: PaymentMethodGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (pmgb *PaymentMethodGroupBy) Float64X(ctx context.Context) float64 {
	v, err := pmgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (pmgb *PaymentMethodGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(pmgb.fields) > 1 {
		return nil, errors.New("ent: PaymentMethodGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := pmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (pmgb *PaymentMethodGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := pmgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (pmgb *PaymentMethodGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = pmgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{paymentmethod.Label}
	default:
		err = fmt.Errorf("ent: PaymentMethodGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (pmgb *PaymentMethodGroupBy) BoolX(ctx context.Context) bool {
	v, err := pmgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pmgb *PaymentMethodGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range pmgb.fields {
		if !paymentmethod.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := pmgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pmgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pmgb *PaymentMethodGroupBy) sqlQuery() *sql.Selector {
	selector := pmgb.sql
	columns := make([]string, 0, len(pmgb.fields)+len(pmgb.fns))
	columns = append(columns, pmgb.fields...)
	for _, fn := range pmgb.fns {
		columns = append(columns, fn(selector, paymentmethod.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(pmgb.fields...)
}

// PaymentMethodSelect is the builder for select fields of PaymentMethod entities.
type PaymentMethodSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (pms *PaymentMethodSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := pms.path(ctx)
	if err != nil {
		return err
	}
	pms.sql = query
	return pms.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (pms *PaymentMethodSelect) ScanX(ctx context.Context, v interface{}) {
	if err := pms.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (pms *PaymentMethodSelect) Strings(ctx context.Context) ([]string, error) {
	if len(pms.fields) > 1 {
		return nil, errors.New("ent: PaymentMethodSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := pms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (pms *PaymentMethodSelect) StringsX(ctx context.Context) []string {
	v, err := pms.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (pms *PaymentMethodSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = pms.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{paymentmethod.Label}
	default:
		err = fmt.Errorf("ent: PaymentMethodSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (pms *PaymentMethodSelect) StringX(ctx context.Context) string {
	v, err := pms.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (pms *PaymentMethodSelect) Ints(ctx context.Context) ([]int, error) {
	if len(pms.fields) > 1 {
		return nil, errors.New("ent: PaymentMethodSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := pms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (pms *PaymentMethodSelect) IntsX(ctx context.Context) []int {
	v, err := pms.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (pms *PaymentMethodSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = pms.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{paymentmethod.Label}
	default:
		err = fmt.Errorf("ent: PaymentMethodSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (pms *PaymentMethodSelect) IntX(ctx context.Context) int {
	v, err := pms.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (pms *PaymentMethodSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(pms.fields) > 1 {
		return nil, errors.New("ent: PaymentMethodSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := pms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (pms *PaymentMethodSelect) Float64sX(ctx context.Context) []float64 {
	v, err := pms.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (pms *PaymentMethodSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = pms.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{paymentmethod.Label}
	default:
		err = fmt.Errorf("ent: PaymentMethodSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (pms *PaymentMethodSelect) Float64X(ctx context.Context) float64 {
	v, err := pms.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (pms *PaymentMethodSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(pms.fields) > 1 {
		return nil, errors.New("ent: PaymentMethodSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := pms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (pms *PaymentMethodSelect) BoolsX(ctx context.Context) []bool {
	v, err := pms.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (pms *PaymentMethodSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = pms.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{paymentmethod.Label}
	default:
		err = fmt.Errorf("ent: PaymentMethodSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (pms *PaymentMethodSelect) BoolX(ctx context.Context) bool {
	v, err := pms.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pms *PaymentMethodSelect) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range pms.fields {
		if !paymentmethod.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for selection", f)}
		}
	}
	rows := &sql.Rows{}
	query, args := pms.sqlQuery().Query()
	if err := pms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pms *PaymentMethodSelect) sqlQuery() sql.Querier {
	selector := pms.sql
	selector.Select(selector.Columns(pms.fields...)...)
	return selector
}
