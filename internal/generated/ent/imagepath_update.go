// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"foodworks.ml/m/internal/generated/ent/imagepath"
	"foodworks.ml/m/internal/generated/ent/predicate"
	"foodworks.ml/m/internal/generated/ent/product"
	"foodworks.ml/m/internal/generated/ent/restaurant"
	"foodworks.ml/m/internal/generated/ent/tag"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// ImagePathUpdate is the builder for updating ImagePath entities.
type ImagePathUpdate struct {
	config
	hooks      []Hook
	mutation   *ImagePathMutation
	predicates []predicate.ImagePath
}

// Where adds a new predicate for the builder.
func (ipu *ImagePathUpdate) Where(ps ...predicate.ImagePath) *ImagePathUpdate {
	ipu.predicates = append(ipu.predicates, ps...)
	return ipu
}

// SetPath sets the path field.
func (ipu *ImagePathUpdate) SetPath(s string) *ImagePathUpdate {
	ipu.mutation.SetPath(s)
	return ipu
}

// SetProductID sets the product edge to Product by id.
func (ipu *ImagePathUpdate) SetProductID(id int) *ImagePathUpdate {
	ipu.mutation.SetProductID(id)
	return ipu
}

// SetNillableProductID sets the product edge to Product by id if the given value is not nil.
func (ipu *ImagePathUpdate) SetNillableProductID(id *int) *ImagePathUpdate {
	if id != nil {
		ipu = ipu.SetProductID(*id)
	}
	return ipu
}

// SetProduct sets the product edge to Product.
func (ipu *ImagePathUpdate) SetProduct(p *Product) *ImagePathUpdate {
	return ipu.SetProductID(p.ID)
}

// SetRestaurantID sets the restaurant edge to Restaurant by id.
func (ipu *ImagePathUpdate) SetRestaurantID(id int) *ImagePathUpdate {
	ipu.mutation.SetRestaurantID(id)
	return ipu
}

// SetNillableRestaurantID sets the restaurant edge to Restaurant by id if the given value is not nil.
func (ipu *ImagePathUpdate) SetNillableRestaurantID(id *int) *ImagePathUpdate {
	if id != nil {
		ipu = ipu.SetRestaurantID(*id)
	}
	return ipu
}

// SetRestaurant sets the restaurant edge to Restaurant.
func (ipu *ImagePathUpdate) SetRestaurant(r *Restaurant) *ImagePathUpdate {
	return ipu.SetRestaurantID(r.ID)
}

// SetTagID sets the tag edge to Tag by id.
func (ipu *ImagePathUpdate) SetTagID(id int) *ImagePathUpdate {
	ipu.mutation.SetTagID(id)
	return ipu
}

// SetNillableTagID sets the tag edge to Tag by id if the given value is not nil.
func (ipu *ImagePathUpdate) SetNillableTagID(id *int) *ImagePathUpdate {
	if id != nil {
		ipu = ipu.SetTagID(*id)
	}
	return ipu
}

// SetTag sets the tag edge to Tag.
func (ipu *ImagePathUpdate) SetTag(t *Tag) *ImagePathUpdate {
	return ipu.SetTagID(t.ID)
}

// Mutation returns the ImagePathMutation object of the builder.
func (ipu *ImagePathUpdate) Mutation() *ImagePathMutation {
	return ipu.mutation
}

// ClearProduct clears the "product" edge to type Product.
func (ipu *ImagePathUpdate) ClearProduct() *ImagePathUpdate {
	ipu.mutation.ClearProduct()
	return ipu
}

// ClearRestaurant clears the "restaurant" edge to type Restaurant.
func (ipu *ImagePathUpdate) ClearRestaurant() *ImagePathUpdate {
	ipu.mutation.ClearRestaurant()
	return ipu
}

// ClearTag clears the "tag" edge to type Tag.
func (ipu *ImagePathUpdate) ClearTag() *ImagePathUpdate {
	ipu.mutation.ClearTag()
	return ipu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ipu *ImagePathUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ipu.hooks) == 0 {
		affected, err = ipu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ImagePathMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ipu.mutation = mutation
			affected, err = ipu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ipu.hooks) - 1; i >= 0; i-- {
			mut = ipu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ipu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ipu *ImagePathUpdate) SaveX(ctx context.Context) int {
	affected, err := ipu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ipu *ImagePathUpdate) Exec(ctx context.Context) error {
	_, err := ipu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ipu *ImagePathUpdate) ExecX(ctx context.Context) {
	if err := ipu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ipu *ImagePathUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   imagepath.Table,
			Columns: imagepath.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: imagepath.FieldID,
			},
		},
	}
	if ps := ipu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ipu.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: imagepath.FieldPath,
		})
	}
	if ipu.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imagepath.ProductTable,
			Columns: []string{imagepath.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipu.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imagepath.ProductTable,
			Columns: []string{imagepath.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ipu.mutation.RestaurantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imagepath.RestaurantTable,
			Columns: []string{imagepath.RestaurantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipu.mutation.RestaurantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imagepath.RestaurantTable,
			Columns: []string{imagepath.RestaurantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ipu.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imagepath.TagTable,
			Columns: []string{imagepath.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipu.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imagepath.TagTable,
			Columns: []string{imagepath.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ipu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{imagepath.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ImagePathUpdateOne is the builder for updating a single ImagePath entity.
type ImagePathUpdateOne struct {
	config
	hooks    []Hook
	mutation *ImagePathMutation
}

// SetPath sets the path field.
func (ipuo *ImagePathUpdateOne) SetPath(s string) *ImagePathUpdateOne {
	ipuo.mutation.SetPath(s)
	return ipuo
}

// SetProductID sets the product edge to Product by id.
func (ipuo *ImagePathUpdateOne) SetProductID(id int) *ImagePathUpdateOne {
	ipuo.mutation.SetProductID(id)
	return ipuo
}

// SetNillableProductID sets the product edge to Product by id if the given value is not nil.
func (ipuo *ImagePathUpdateOne) SetNillableProductID(id *int) *ImagePathUpdateOne {
	if id != nil {
		ipuo = ipuo.SetProductID(*id)
	}
	return ipuo
}

// SetProduct sets the product edge to Product.
func (ipuo *ImagePathUpdateOne) SetProduct(p *Product) *ImagePathUpdateOne {
	return ipuo.SetProductID(p.ID)
}

// SetRestaurantID sets the restaurant edge to Restaurant by id.
func (ipuo *ImagePathUpdateOne) SetRestaurantID(id int) *ImagePathUpdateOne {
	ipuo.mutation.SetRestaurantID(id)
	return ipuo
}

// SetNillableRestaurantID sets the restaurant edge to Restaurant by id if the given value is not nil.
func (ipuo *ImagePathUpdateOne) SetNillableRestaurantID(id *int) *ImagePathUpdateOne {
	if id != nil {
		ipuo = ipuo.SetRestaurantID(*id)
	}
	return ipuo
}

// SetRestaurant sets the restaurant edge to Restaurant.
func (ipuo *ImagePathUpdateOne) SetRestaurant(r *Restaurant) *ImagePathUpdateOne {
	return ipuo.SetRestaurantID(r.ID)
}

// SetTagID sets the tag edge to Tag by id.
func (ipuo *ImagePathUpdateOne) SetTagID(id int) *ImagePathUpdateOne {
	ipuo.mutation.SetTagID(id)
	return ipuo
}

// SetNillableTagID sets the tag edge to Tag by id if the given value is not nil.
func (ipuo *ImagePathUpdateOne) SetNillableTagID(id *int) *ImagePathUpdateOne {
	if id != nil {
		ipuo = ipuo.SetTagID(*id)
	}
	return ipuo
}

// SetTag sets the tag edge to Tag.
func (ipuo *ImagePathUpdateOne) SetTag(t *Tag) *ImagePathUpdateOne {
	return ipuo.SetTagID(t.ID)
}

// Mutation returns the ImagePathMutation object of the builder.
func (ipuo *ImagePathUpdateOne) Mutation() *ImagePathMutation {
	return ipuo.mutation
}

// ClearProduct clears the "product" edge to type Product.
func (ipuo *ImagePathUpdateOne) ClearProduct() *ImagePathUpdateOne {
	ipuo.mutation.ClearProduct()
	return ipuo
}

// ClearRestaurant clears the "restaurant" edge to type Restaurant.
func (ipuo *ImagePathUpdateOne) ClearRestaurant() *ImagePathUpdateOne {
	ipuo.mutation.ClearRestaurant()
	return ipuo
}

// ClearTag clears the "tag" edge to type Tag.
func (ipuo *ImagePathUpdateOne) ClearTag() *ImagePathUpdateOne {
	ipuo.mutation.ClearTag()
	return ipuo
}

// Save executes the query and returns the updated entity.
func (ipuo *ImagePathUpdateOne) Save(ctx context.Context) (*ImagePath, error) {
	var (
		err  error
		node *ImagePath
	)
	if len(ipuo.hooks) == 0 {
		node, err = ipuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ImagePathMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ipuo.mutation = mutation
			node, err = ipuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ipuo.hooks) - 1; i >= 0; i-- {
			mut = ipuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ipuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ipuo *ImagePathUpdateOne) SaveX(ctx context.Context) *ImagePath {
	node, err := ipuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ipuo *ImagePathUpdateOne) Exec(ctx context.Context) error {
	_, err := ipuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ipuo *ImagePathUpdateOne) ExecX(ctx context.Context) {
	if err := ipuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ipuo *ImagePathUpdateOne) sqlSave(ctx context.Context) (_node *ImagePath, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   imagepath.Table,
			Columns: imagepath.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: imagepath.FieldID,
			},
		},
	}
	id, ok := ipuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ImagePath.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ipuo.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: imagepath.FieldPath,
		})
	}
	if ipuo.mutation.ProductCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imagepath.ProductTable,
			Columns: []string{imagepath.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipuo.mutation.ProductIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imagepath.ProductTable,
			Columns: []string{imagepath.ProductColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: product.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ipuo.mutation.RestaurantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imagepath.RestaurantTable,
			Columns: []string{imagepath.RestaurantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipuo.mutation.RestaurantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imagepath.RestaurantTable,
			Columns: []string{imagepath.RestaurantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ipuo.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imagepath.TagTable,
			Columns: []string{imagepath.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipuo.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   imagepath.TagTable,
			Columns: []string{imagepath.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ImagePath{config: ipuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ipuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{imagepath.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
