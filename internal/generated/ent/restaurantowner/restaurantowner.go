// Code generated by entc, DO NOT EDIT.

package restaurantowner

const (
	// Label holds the string label denoting the restaurantowner type in the database.
	Label = "restaurant_owner"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldKratosID holds the string denoting the kratos_id field in the database.
	FieldKratosID = "kratos_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"

	// EdgeBankingData holds the string denoting the banking_data edge name in mutations.
	EdgeBankingData = "banking_data"

	// Table holds the table name of the restaurantowner in the database.
	Table = "restaurant_owners"
	// BankingDataTable is the table the holds the banking_data relation/edge.
	BankingDataTable = "restaurant_owners"
	// BankingDataInverseTable is the table name for the BankingData entity.
	// It exists in this package in order to avoid circular dependency with the "bankingdata" package.
	BankingDataInverseTable = "banking_data"
	// BankingDataColumn is the table column denoting the banking_data relation/edge.
	BankingDataColumn = "restaurant_owner_banking_data"
)

// Columns holds all SQL columns for restaurantowner fields.
var Columns = []string{
	FieldID,
	FieldKratosID,
	FieldName,
	FieldEmail,
	FieldPhone,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the RestaurantOwner type.
var ForeignKeys = []string{
	"restaurant_owner_banking_data",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
