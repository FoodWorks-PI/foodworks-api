// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"github.com/facebook/ent/dialect/sql/schema"
	"github.com/facebook/ent/schema/field"
)

var (
	// AddressesColumns holds the columns for the "addresses" table.
	AddressesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "latitude", Type: field.TypeFloat64},
		{Name: "longitude", Type: field.TypeFloat64},
		{Name: "street_line", Type: field.TypeString},
		{Name: "geom", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "geometry(POINT)"}},
	}
	// AddressesTable holds the schema information for the "addresses" table.
	AddressesTable = &schema.Table{
		Name:        "addresses",
		Columns:     AddressesColumns,
		PrimaryKey:  []*schema.Column{AddressesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// BankingDataColumns holds the columns for the "banking_data" table.
	BankingDataColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "bank_account", Type: field.TypeString},
	}
	// BankingDataTable holds the schema information for the "banking_data" table.
	BankingDataTable = &schema.Table{
		Name:        "banking_data",
		Columns:     BankingDataColumns,
		PrimaryKey:  []*schema.Column{BankingDataColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// CustomersColumns holds the columns for the "customers" table.
	CustomersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "kratos_id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "last_name", Type: field.TypeString},
		{Name: "email", Type: field.TypeString},
		{Name: "phone", Type: field.TypeString},
		{Name: "customer_address", Type: field.TypeInt, Nullable: true},
	}
	// CustomersTable holds the schema information for the "customers" table.
	CustomersTable = &schema.Table{
		Name:       "customers",
		Columns:    CustomersColumns,
		PrimaryKey: []*schema.Column{CustomersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "customers_addresses_address",
				Columns: []*schema.Column{CustomersColumns[6]},

				RefColumns: []*schema.Column{AddressesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "customer_kratos_id_email",
				Unique:  true,
				Columns: []*schema.Column{CustomersColumns[1], CustomersColumns[4]},
			},
		},
	}
	// ImagePathsColumns holds the columns for the "image_paths" table.
	ImagePathsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "path", Type: field.TypeString},
		{Name: "product_images", Type: field.TypeInt, Nullable: true},
		{Name: "restaurant_images", Type: field.TypeInt, Nullable: true},
		{Name: "tag_images", Type: field.TypeInt, Nullable: true},
	}
	// ImagePathsTable holds the schema information for the "image_paths" table.
	ImagePathsTable = &schema.Table{
		Name:       "image_paths",
		Columns:    ImagePathsColumns,
		PrimaryKey: []*schema.Column{ImagePathsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "image_paths_products_images",
				Columns: []*schema.Column{ImagePathsColumns[2]},

				RefColumns: []*schema.Column{ProductsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "image_paths_restaurants_images",
				Columns: []*schema.Column{ImagePathsColumns[3]},

				RefColumns: []*schema.Column{RestaurantsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "image_paths_tags_images",
				Columns: []*schema.Column{ImagePathsColumns[4]},

				RefColumns: []*schema.Column{TagsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// OrdersColumns holds the columns for the "orders" table.
	OrdersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "order_state", Type: field.TypeString},
		{Name: "quantity", Type: field.TypeInt},
		{Name: "updated_at", Type: field.TypeTime, SchemaType: map[string]string{"postgres": "timestamp"}},
	}
	// OrdersTable holds the schema information for the "orders" table.
	OrdersTable = &schema.Table{
		Name:        "orders",
		Columns:     OrdersColumns,
		PrimaryKey:  []*schema.Column{OrdersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// PaymentMethodsColumns holds the columns for the "payment_methods" table.
	PaymentMethodsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "data", Type: field.TypeString},
		{Name: "customer_payment_method", Type: field.TypeInt, Nullable: true},
	}
	// PaymentMethodsTable holds the schema information for the "payment_methods" table.
	PaymentMethodsTable = &schema.Table{
		Name:       "payment_methods",
		Columns:    PaymentMethodsColumns,
		PrimaryKey: []*schema.Column{PaymentMethodsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "payment_methods_customers_payment_method",
				Columns: []*schema.Column{PaymentMethodsColumns[2]},

				RefColumns: []*schema.Column{CustomersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ProductsColumns holds the columns for the "products" table.
	ProductsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "zdb.fulltext"}},
		{Name: "cost", Type: field.TypeInt},
		{Name: "is_active", Type: field.TypeBool},
	}
	// ProductsTable holds the schema information for the "products" table.
	ProductsTable = &schema.Table{
		Name:        "products",
		Columns:     ProductsColumns,
		PrimaryKey:  []*schema.Column{ProductsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// RatingsColumns holds the columns for the "ratings" table.
	RatingsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "comment", Type: field.TypeString},
		{Name: "rating", Type: field.TypeInt},
		{Name: "customer_ratings", Type: field.TypeInt, Nullable: true},
		{Name: "product_ratings", Type: field.TypeInt, Nullable: true},
	}
	// RatingsTable holds the schema information for the "ratings" table.
	RatingsTable = &schema.Table{
		Name:       "ratings",
		Columns:    RatingsColumns,
		PrimaryKey: []*schema.Column{RatingsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "ratings_customers_ratings",
				Columns: []*schema.Column{RatingsColumns[3]},

				RefColumns: []*schema.Column{CustomersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "ratings_products_ratings",
				Columns: []*schema.Column{RatingsColumns[4]},

				RefColumns: []*schema.Column{ProductsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RestaurantsColumns holds the columns for the "restaurants" table.
	RestaurantsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"postgres": "zdb.fulltext"}},
		{Name: "restaurant_address", Type: field.TypeInt, Nullable: true},
	}
	// RestaurantsTable holds the schema information for the "restaurants" table.
	RestaurantsTable = &schema.Table{
		Name:       "restaurants",
		Columns:    RestaurantsColumns,
		PrimaryKey: []*schema.Column{RestaurantsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "restaurants_addresses_address",
				Columns: []*schema.Column{RestaurantsColumns[3]},

				RefColumns: []*schema.Column{AddressesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RestaurantOwnersColumns holds the columns for the "restaurant_owners" table.
	RestaurantOwnersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "kratos_id", Type: field.TypeString},
		{Name: "name", Type: field.TypeString},
		{Name: "last_name", Type: field.TypeString},
		{Name: "email", Type: field.TypeString},
		{Name: "phone", Type: field.TypeString},
		{Name: "restaurant_owner_banking_data", Type: field.TypeInt, Nullable: true},
		{Name: "restaurant_owner_restaurant", Type: field.TypeInt, Nullable: true},
	}
	// RestaurantOwnersTable holds the schema information for the "restaurant_owners" table.
	RestaurantOwnersTable = &schema.Table{
		Name:       "restaurant_owners",
		Columns:    RestaurantOwnersColumns,
		PrimaryKey: []*schema.Column{RestaurantOwnersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "restaurant_owners_banking_data_banking_data",
				Columns: []*schema.Column{RestaurantOwnersColumns[6]},

				RefColumns: []*schema.Column{BankingDataColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "restaurant_owners_restaurants_restaurant",
				Columns: []*schema.Column{RestaurantOwnersColumns[7]},

				RefColumns: []*schema.Column{RestaurantsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "restaurantowner_kratos_id_email",
				Unique:  true,
				Columns: []*schema.Column{RestaurantOwnersColumns[1], RestaurantOwnersColumns[4]},
			},
		},
	}
	// TagsColumns holds the columns for the "tags" table.
	TagsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
	}
	// TagsTable holds the schema information for the "tags" table.
	TagsTable = &schema.Table{
		Name:        "tags",
		Columns:     TagsColumns,
		PrimaryKey:  []*schema.Column{TagsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// CustomerOrdersColumns holds the columns for the "customer_orders" table.
	CustomerOrdersColumns = []*schema.Column{
		{Name: "customer_id", Type: field.TypeInt},
		{Name: "order_id", Type: field.TypeInt},
	}
	// CustomerOrdersTable holds the schema information for the "customer_orders" table.
	CustomerOrdersTable = &schema.Table{
		Name:       "customer_orders",
		Columns:    CustomerOrdersColumns,
		PrimaryKey: []*schema.Column{CustomerOrdersColumns[0], CustomerOrdersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "customer_orders_customer_id",
				Columns: []*schema.Column{CustomerOrdersColumns[0]},

				RefColumns: []*schema.Column{CustomersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "customer_orders_order_id",
				Columns: []*schema.Column{CustomerOrdersColumns[1]},

				RefColumns: []*schema.Column{OrdersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ProductTagsColumns holds the columns for the "product_tags" table.
	ProductTagsColumns = []*schema.Column{
		{Name: "product_id", Type: field.TypeInt},
		{Name: "tag_id", Type: field.TypeInt},
	}
	// ProductTagsTable holds the schema information for the "product_tags" table.
	ProductTagsTable = &schema.Table{
		Name:       "product_tags",
		Columns:    ProductTagsColumns,
		PrimaryKey: []*schema.Column{ProductTagsColumns[0], ProductTagsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "product_tags_product_id",
				Columns: []*schema.Column{ProductTagsColumns[0]},

				RefColumns: []*schema.Column{ProductsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "product_tags_tag_id",
				Columns: []*schema.Column{ProductTagsColumns[1]},

				RefColumns: []*schema.Column{TagsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// ProductOrdersColumns holds the columns for the "product_orders" table.
	ProductOrdersColumns = []*schema.Column{
		{Name: "product_id", Type: field.TypeInt},
		{Name: "order_id", Type: field.TypeInt},
	}
	// ProductOrdersTable holds the schema information for the "product_orders" table.
	ProductOrdersTable = &schema.Table{
		Name:       "product_orders",
		Columns:    ProductOrdersColumns,
		PrimaryKey: []*schema.Column{ProductOrdersColumns[0], ProductOrdersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "product_orders_product_id",
				Columns: []*schema.Column{ProductOrdersColumns[0]},

				RefColumns: []*schema.Column{ProductsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "product_orders_order_id",
				Columns: []*schema.Column{ProductOrdersColumns[1]},

				RefColumns: []*schema.Column{OrdersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// RestaurantTagsColumns holds the columns for the "restaurant_tags" table.
	RestaurantTagsColumns = []*schema.Column{
		{Name: "restaurant_id", Type: field.TypeInt},
		{Name: "tag_id", Type: field.TypeInt},
	}
	// RestaurantTagsTable holds the schema information for the "restaurant_tags" table.
	RestaurantTagsTable = &schema.Table{
		Name:       "restaurant_tags",
		Columns:    RestaurantTagsColumns,
		PrimaryKey: []*schema.Column{RestaurantTagsColumns[0], RestaurantTagsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "restaurant_tags_restaurant_id",
				Columns: []*schema.Column{RestaurantTagsColumns[0]},

				RefColumns: []*schema.Column{RestaurantsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "restaurant_tags_tag_id",
				Columns: []*schema.Column{RestaurantTagsColumns[1]},

				RefColumns: []*schema.Column{TagsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// RestaurantProductsColumns holds the columns for the "restaurant_products" table.
	RestaurantProductsColumns = []*schema.Column{
		{Name: "restaurant_id", Type: field.TypeInt},
		{Name: "product_id", Type: field.TypeInt},
	}
	// RestaurantProductsTable holds the schema information for the "restaurant_products" table.
	RestaurantProductsTable = &schema.Table{
		Name:       "restaurant_products",
		Columns:    RestaurantProductsColumns,
		PrimaryKey: []*schema.Column{RestaurantProductsColumns[0], RestaurantProductsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "restaurant_products_restaurant_id",
				Columns: []*schema.Column{RestaurantProductsColumns[0]},

				RefColumns: []*schema.Column{RestaurantsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "restaurant_products_product_id",
				Columns: []*schema.Column{RestaurantProductsColumns[1]},

				RefColumns: []*schema.Column{ProductsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AddressesTable,
		BankingDataTable,
		CustomersTable,
		ImagePathsTable,
		OrdersTable,
		PaymentMethodsTable,
		ProductsTable,
		RatingsTable,
		RestaurantsTable,
		RestaurantOwnersTable,
		TagsTable,
		CustomerOrdersTable,
		ProductTagsTable,
		ProductOrdersTable,
		RestaurantTagsTable,
		RestaurantProductsTable,
	}
)

func init() {
	CustomersTable.ForeignKeys[0].RefTable = AddressesTable
	ImagePathsTable.ForeignKeys[0].RefTable = ProductsTable
	ImagePathsTable.ForeignKeys[1].RefTable = RestaurantsTable
	ImagePathsTable.ForeignKeys[2].RefTable = TagsTable
	PaymentMethodsTable.ForeignKeys[0].RefTable = CustomersTable
	RatingsTable.ForeignKeys[0].RefTable = CustomersTable
	RatingsTable.ForeignKeys[1].RefTable = ProductsTable
	RestaurantsTable.ForeignKeys[0].RefTable = AddressesTable
	RestaurantOwnersTable.ForeignKeys[0].RefTable = BankingDataTable
	RestaurantOwnersTable.ForeignKeys[1].RefTable = RestaurantsTable
	CustomerOrdersTable.ForeignKeys[0].RefTable = CustomersTable
	CustomerOrdersTable.ForeignKeys[1].RefTable = OrdersTable
	ProductTagsTable.ForeignKeys[0].RefTable = ProductsTable
	ProductTagsTable.ForeignKeys[1].RefTable = TagsTable
	ProductOrdersTable.ForeignKeys[0].RefTable = ProductsTable
	ProductOrdersTable.ForeignKeys[1].RefTable = OrdersTable
	RestaurantTagsTable.ForeignKeys[0].RefTable = RestaurantsTable
	RestaurantTagsTable.ForeignKeys[1].RefTable = TagsTable
	RestaurantProductsTable.ForeignKeys[0].RefTable = RestaurantsTable
	RestaurantProductsTable.ForeignKeys[1].RefTable = ProductsTable
}
