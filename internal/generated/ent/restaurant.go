// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"foodworks.ml/m/internal/generated/ent/address"
	"foodworks.ml/m/internal/generated/ent/restaurant"
	"github.com/facebook/ent/dialect/sql"
)

// Restaurant is the model entity for the Restaurant schema.
type Restaurant struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RestaurantQuery when eager-loading is set.
	Edges              RestaurantEdges `json:"edges"`
	restaurant_address *int
}

// RestaurantEdges holds the relations/edges for other nodes in the graph.
type RestaurantEdges struct {
	// Address holds the value of the address edge.
	Address *Address
	// Tags holds the value of the tags edge.
	Tags []*Tag
	// Owner holds the value of the owner edge.
	Owner []*RestaurantOwner
	// Products holds the value of the products edge.
	Products []*Product
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// AddressOrErr returns the Address value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RestaurantEdges) AddressOrErr() (*Address, error) {
	if e.loadedTypes[0] {
		if e.Address == nil {
			// The edge address was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: address.Label}
		}
		return e.Address, nil
	}
	return nil, &NotLoadedError{edge: "address"}
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e RestaurantEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[1] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading.
func (e RestaurantEdges) OwnerOrErr() ([]*RestaurantOwner, error) {
	if e.loadedTypes[2] {
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// ProductsOrErr returns the Products value or an error if the edge
// was not loaded in eager-loading.
func (e RestaurantEdges) ProductsOrErr() ([]*Product, error) {
	if e.loadedTypes[3] {
		return e.Products, nil
	}
	return nil, &NotLoadedError{edge: "products"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Restaurant) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // description
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Restaurant) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // restaurant_address
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Restaurant fields.
func (r *Restaurant) assignValues(values ...interface{}) error {
	if m, n := len(values), len(restaurant.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		r.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field description", values[1])
	} else if value.Valid {
		r.Description = value.String
	}
	values = values[2:]
	if len(values) == len(restaurant.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field restaurant_address", value)
		} else if value.Valid {
			r.restaurant_address = new(int)
			*r.restaurant_address = int(value.Int64)
		}
	}
	return nil
}

// QueryAddress queries the address edge of the Restaurant.
func (r *Restaurant) QueryAddress() *AddressQuery {
	return (&RestaurantClient{config: r.config}).QueryAddress(r)
}

// QueryTags queries the tags edge of the Restaurant.
func (r *Restaurant) QueryTags() *TagQuery {
	return (&RestaurantClient{config: r.config}).QueryTags(r)
}

// QueryOwner queries the owner edge of the Restaurant.
func (r *Restaurant) QueryOwner() *RestaurantOwnerQuery {
	return (&RestaurantClient{config: r.config}).QueryOwner(r)
}

// QueryProducts queries the products edge of the Restaurant.
func (r *Restaurant) QueryProducts() *ProductQuery {
	return (&RestaurantClient{config: r.config}).QueryProducts(r)
}

// Update returns a builder for updating this Restaurant.
// Note that, you need to call Restaurant.Unwrap() before calling this method, if this Restaurant
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Restaurant) Update() *RestaurantUpdateOne {
	return (&RestaurantClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Restaurant) Unwrap() *Restaurant {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Restaurant is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Restaurant) String() string {
	var builder strings.Builder
	builder.WriteString("Restaurant(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", name=")
	builder.WriteString(r.Name)
	builder.WriteString(", description=")
	builder.WriteString(r.Description)
	builder.WriteByte(')')
	return builder.String()
}

// Restaurants is a parsable slice of Restaurant.
type Restaurants []*Restaurant

func (r Restaurants) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
