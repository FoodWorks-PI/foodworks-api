// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"foodworks.ml/m/internal/generated/ent/bankingdata"
	"foodworks.ml/m/internal/generated/ent/predicate"
	"foodworks.ml/m/internal/generated/ent/restaurant"
	"foodworks.ml/m/internal/generated/ent/restaurantowner"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// RestaurantOwnerUpdate is the builder for updating RestaurantOwner entities.
type RestaurantOwnerUpdate struct {
	config
	hooks      []Hook
	mutation   *RestaurantOwnerMutation
	predicates []predicate.RestaurantOwner
}

// Where adds a new predicate for the builder.
func (rou *RestaurantOwnerUpdate) Where(ps ...predicate.RestaurantOwner) *RestaurantOwnerUpdate {
	rou.predicates = append(rou.predicates, ps...)
	return rou
}

// SetKratosID sets the kratos_id field.
func (rou *RestaurantOwnerUpdate) SetKratosID(s string) *RestaurantOwnerUpdate {
	rou.mutation.SetKratosID(s)
	return rou
}

// SetName sets the name field.
func (rou *RestaurantOwnerUpdate) SetName(s string) *RestaurantOwnerUpdate {
	rou.mutation.SetName(s)
	return rou
}

// SetEmail sets the email field.
func (rou *RestaurantOwnerUpdate) SetEmail(s string) *RestaurantOwnerUpdate {
	rou.mutation.SetEmail(s)
	return rou
}

// SetPhone sets the phone field.
func (rou *RestaurantOwnerUpdate) SetPhone(s string) *RestaurantOwnerUpdate {
	rou.mutation.SetPhone(s)
	return rou
}

// SetBankingDataID sets the banking_data edge to BankingData by id.
func (rou *RestaurantOwnerUpdate) SetBankingDataID(id int) *RestaurantOwnerUpdate {
	rou.mutation.SetBankingDataID(id)
	return rou
}

// SetNillableBankingDataID sets the banking_data edge to BankingData by id if the given value is not nil.
func (rou *RestaurantOwnerUpdate) SetNillableBankingDataID(id *int) *RestaurantOwnerUpdate {
	if id != nil {
		rou = rou.SetBankingDataID(*id)
	}
	return rou
}

// SetBankingData sets the banking_data edge to BankingData.
func (rou *RestaurantOwnerUpdate) SetBankingData(b *BankingData) *RestaurantOwnerUpdate {
	return rou.SetBankingDataID(b.ID)
}

// SetRestaurantID sets the restaurant edge to Restaurant by id.
func (rou *RestaurantOwnerUpdate) SetRestaurantID(id int) *RestaurantOwnerUpdate {
	rou.mutation.SetRestaurantID(id)
	return rou
}

// SetNillableRestaurantID sets the restaurant edge to Restaurant by id if the given value is not nil.
func (rou *RestaurantOwnerUpdate) SetNillableRestaurantID(id *int) *RestaurantOwnerUpdate {
	if id != nil {
		rou = rou.SetRestaurantID(*id)
	}
	return rou
}

// SetRestaurant sets the restaurant edge to Restaurant.
func (rou *RestaurantOwnerUpdate) SetRestaurant(r *Restaurant) *RestaurantOwnerUpdate {
	return rou.SetRestaurantID(r.ID)
}

// Mutation returns the RestaurantOwnerMutation object of the builder.
func (rou *RestaurantOwnerUpdate) Mutation() *RestaurantOwnerMutation {
	return rou.mutation
}

// ClearBankingData clears the "banking_data" edge to type BankingData.
func (rou *RestaurantOwnerUpdate) ClearBankingData() *RestaurantOwnerUpdate {
	rou.mutation.ClearBankingData()
	return rou
}

// ClearRestaurant clears the "restaurant" edge to type Restaurant.
func (rou *RestaurantOwnerUpdate) ClearRestaurant() *RestaurantOwnerUpdate {
	rou.mutation.ClearRestaurant()
	return rou
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (rou *RestaurantOwnerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(rou.hooks) == 0 {
		affected, err = rou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RestaurantOwnerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rou.mutation = mutation
			affected, err = rou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rou.hooks) - 1; i >= 0; i-- {
			mut = rou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rou *RestaurantOwnerUpdate) SaveX(ctx context.Context) int {
	affected, err := rou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rou *RestaurantOwnerUpdate) Exec(ctx context.Context) error {
	_, err := rou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rou *RestaurantOwnerUpdate) ExecX(ctx context.Context) {
	if err := rou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rou *RestaurantOwnerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   restaurantowner.Table,
			Columns: restaurantowner.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: restaurantowner.FieldID,
			},
		},
	}
	if ps := rou.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rou.mutation.KratosID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaurantowner.FieldKratosID,
		})
	}
	if value, ok := rou.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaurantowner.FieldName,
		})
	}
	if value, ok := rou.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaurantowner.FieldEmail,
		})
	}
	if value, ok := rou.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaurantowner.FieldPhone,
		})
	}
	if rou.mutation.BankingDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   restaurantowner.BankingDataTable,
			Columns: []string{restaurantowner.BankingDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bankingdata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rou.mutation.BankingDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   restaurantowner.BankingDataTable,
			Columns: []string{restaurantowner.BankingDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bankingdata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rou.mutation.RestaurantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   restaurantowner.RestaurantTable,
			Columns: []string{restaurantowner.RestaurantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rou.mutation.RestaurantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   restaurantowner.RestaurantTable,
			Columns: []string{restaurantowner.RestaurantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{restaurantowner.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RestaurantOwnerUpdateOne is the builder for updating a single RestaurantOwner entity.
type RestaurantOwnerUpdateOne struct {
	config
	hooks    []Hook
	mutation *RestaurantOwnerMutation
}

// SetKratosID sets the kratos_id field.
func (rouo *RestaurantOwnerUpdateOne) SetKratosID(s string) *RestaurantOwnerUpdateOne {
	rouo.mutation.SetKratosID(s)
	return rouo
}

// SetName sets the name field.
func (rouo *RestaurantOwnerUpdateOne) SetName(s string) *RestaurantOwnerUpdateOne {
	rouo.mutation.SetName(s)
	return rouo
}

// SetEmail sets the email field.
func (rouo *RestaurantOwnerUpdateOne) SetEmail(s string) *RestaurantOwnerUpdateOne {
	rouo.mutation.SetEmail(s)
	return rouo
}

// SetPhone sets the phone field.
func (rouo *RestaurantOwnerUpdateOne) SetPhone(s string) *RestaurantOwnerUpdateOne {
	rouo.mutation.SetPhone(s)
	return rouo
}

// SetBankingDataID sets the banking_data edge to BankingData by id.
func (rouo *RestaurantOwnerUpdateOne) SetBankingDataID(id int) *RestaurantOwnerUpdateOne {
	rouo.mutation.SetBankingDataID(id)
	return rouo
}

// SetNillableBankingDataID sets the banking_data edge to BankingData by id if the given value is not nil.
func (rouo *RestaurantOwnerUpdateOne) SetNillableBankingDataID(id *int) *RestaurantOwnerUpdateOne {
	if id != nil {
		rouo = rouo.SetBankingDataID(*id)
	}
	return rouo
}

// SetBankingData sets the banking_data edge to BankingData.
func (rouo *RestaurantOwnerUpdateOne) SetBankingData(b *BankingData) *RestaurantOwnerUpdateOne {
	return rouo.SetBankingDataID(b.ID)
}

// SetRestaurantID sets the restaurant edge to Restaurant by id.
func (rouo *RestaurantOwnerUpdateOne) SetRestaurantID(id int) *RestaurantOwnerUpdateOne {
	rouo.mutation.SetRestaurantID(id)
	return rouo
}

// SetNillableRestaurantID sets the restaurant edge to Restaurant by id if the given value is not nil.
func (rouo *RestaurantOwnerUpdateOne) SetNillableRestaurantID(id *int) *RestaurantOwnerUpdateOne {
	if id != nil {
		rouo = rouo.SetRestaurantID(*id)
	}
	return rouo
}

// SetRestaurant sets the restaurant edge to Restaurant.
func (rouo *RestaurantOwnerUpdateOne) SetRestaurant(r *Restaurant) *RestaurantOwnerUpdateOne {
	return rouo.SetRestaurantID(r.ID)
}

// Mutation returns the RestaurantOwnerMutation object of the builder.
func (rouo *RestaurantOwnerUpdateOne) Mutation() *RestaurantOwnerMutation {
	return rouo.mutation
}

// ClearBankingData clears the "banking_data" edge to type BankingData.
func (rouo *RestaurantOwnerUpdateOne) ClearBankingData() *RestaurantOwnerUpdateOne {
	rouo.mutation.ClearBankingData()
	return rouo
}

// ClearRestaurant clears the "restaurant" edge to type Restaurant.
func (rouo *RestaurantOwnerUpdateOne) ClearRestaurant() *RestaurantOwnerUpdateOne {
	rouo.mutation.ClearRestaurant()
	return rouo
}

// Save executes the query and returns the updated entity.
func (rouo *RestaurantOwnerUpdateOne) Save(ctx context.Context) (*RestaurantOwner, error) {
	var (
		err  error
		node *RestaurantOwner
	)
	if len(rouo.hooks) == 0 {
		node, err = rouo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RestaurantOwnerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rouo.mutation = mutation
			node, err = rouo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rouo.hooks) - 1; i >= 0; i-- {
			mut = rouo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rouo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rouo *RestaurantOwnerUpdateOne) SaveX(ctx context.Context) *RestaurantOwner {
	node, err := rouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rouo *RestaurantOwnerUpdateOne) Exec(ctx context.Context) error {
	_, err := rouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rouo *RestaurantOwnerUpdateOne) ExecX(ctx context.Context) {
	if err := rouo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rouo *RestaurantOwnerUpdateOne) sqlSave(ctx context.Context) (_node *RestaurantOwner, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   restaurantowner.Table,
			Columns: restaurantowner.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: restaurantowner.FieldID,
			},
		},
	}
	id, ok := rouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing RestaurantOwner.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := rouo.mutation.KratosID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaurantowner.FieldKratosID,
		})
	}
	if value, ok := rouo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaurantowner.FieldName,
		})
	}
	if value, ok := rouo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaurantowner.FieldEmail,
		})
	}
	if value, ok := rouo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: restaurantowner.FieldPhone,
		})
	}
	if rouo.mutation.BankingDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   restaurantowner.BankingDataTable,
			Columns: []string{restaurantowner.BankingDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bankingdata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rouo.mutation.BankingDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   restaurantowner.BankingDataTable,
			Columns: []string{restaurantowner.BankingDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bankingdata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if rouo.mutation.RestaurantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   restaurantowner.RestaurantTable,
			Columns: []string{restaurantowner.RestaurantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurant.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rouo.mutation.RestaurantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   restaurantowner.RestaurantTable,
			Columns: []string{restaurantowner.RestaurantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: restaurant.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RestaurantOwner{config: rouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, rouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{restaurantowner.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
