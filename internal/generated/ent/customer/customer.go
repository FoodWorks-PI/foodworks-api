// Code generated by entc, DO NOT EDIT.

package customer

const (
	// Label holds the string label denoting the customer type in the database.
	Label = "customer"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldKratosID holds the string denoting the kratos_id field in the database.
	FieldKratosID = "kratos_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"

	// EdgeAddress holds the string denoting the address edge name in mutations.
	EdgeAddress = "address"
	// EdgeRatings holds the string denoting the ratings edge name in mutations.
	EdgeRatings = "ratings"
	// EdgeOrders holds the string denoting the orders edge name in mutations.
	EdgeOrders = "orders"
	// EdgePaymentMethod holds the string denoting the payment_method edge name in mutations.
	EdgePaymentMethod = "payment_method"

	// Table holds the table name of the customer in the database.
	Table = "customers"
	// AddressTable is the table the holds the address relation/edge.
	AddressTable = "customers"
	// AddressInverseTable is the table name for the Address entity.
	// It exists in this package in order to avoid circular dependency with the "address" package.
	AddressInverseTable = "addresses"
	// AddressColumn is the table column denoting the address relation/edge.
	AddressColumn = "customer_address"
	// RatingsTable is the table the holds the ratings relation/edge.
	RatingsTable = "ratings"
	// RatingsInverseTable is the table name for the Rating entity.
	// It exists in this package in order to avoid circular dependency with the "rating" package.
	RatingsInverseTable = "ratings"
	// RatingsColumn is the table column denoting the ratings relation/edge.
	RatingsColumn = "customer_ratings"
	// OrdersTable is the table the holds the orders relation/edge. The primary key declared below.
	OrdersTable = "customer_orders"
	// OrdersInverseTable is the table name for the Order entity.
	// It exists in this package in order to avoid circular dependency with the "order" package.
	OrdersInverseTable = "orders"
	// PaymentMethodTable is the table the holds the payment_method relation/edge.
	PaymentMethodTable = "payment_methods"
	// PaymentMethodInverseTable is the table name for the PaymentMethod entity.
	// It exists in this package in order to avoid circular dependency with the "paymentmethod" package.
	PaymentMethodInverseTable = "payment_methods"
	// PaymentMethodColumn is the table column denoting the payment_method relation/edge.
	PaymentMethodColumn = "customer_payment_method"
)

// Columns holds all SQL columns for customer fields.
var Columns = []string{
	FieldID,
	FieldKratosID,
	FieldName,
	FieldLastName,
	FieldEmail,
	FieldPhone,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Customer type.
var ForeignKeys = []string{
	"customer_address",
}

var (
	// OrdersPrimaryKey and OrdersColumn2 are the table columns denoting the
	// primary key for the orders relation (M2M).
	OrdersPrimaryKey = []string{"customer_id", "order_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
