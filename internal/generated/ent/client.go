// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"foodworks.ml/m/internal/generated/ent/migrate"

	"foodworks.ml/m/internal/generated/ent/address"
	"foodworks.ml/m/internal/generated/ent/bankingdata"
	"foodworks.ml/m/internal/generated/ent/customer"
	"foodworks.ml/m/internal/generated/ent/product"
	"foodworks.ml/m/internal/generated/ent/restaurant"
	"foodworks.ml/m/internal/generated/ent/restaurantowner"
	"foodworks.ml/m/internal/generated/ent/tag"

	"github.com/facebook/ent/dialect"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Address is the client for interacting with the Address builders.
	Address *AddressClient
	// BankingData is the client for interacting with the BankingData builders.
	BankingData *BankingDataClient
	// Customer is the client for interacting with the Customer builders.
	Customer *CustomerClient
	// Product is the client for interacting with the Product builders.
	Product *ProductClient
	// Restaurant is the client for interacting with the Restaurant builders.
	Restaurant *RestaurantClient
	// RestaurantOwner is the client for interacting with the RestaurantOwner builders.
	RestaurantOwner *RestaurantOwnerClient
	// Tag is the client for interacting with the Tag builders.
	Tag *TagClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Address = NewAddressClient(c.config)
	c.BankingData = NewBankingDataClient(c.config)
	c.Customer = NewCustomerClient(c.config)
	c.Product = NewProductClient(c.config)
	c.Restaurant = NewRestaurantClient(c.config)
	c.RestaurantOwner = NewRestaurantOwnerClient(c.config)
	c.Tag = NewTagClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Address:         NewAddressClient(cfg),
		BankingData:     NewBankingDataClient(cfg),
		Customer:        NewCustomerClient(cfg),
		Product:         NewProductClient(cfg),
		Restaurant:      NewRestaurantClient(cfg),
		RestaurantOwner: NewRestaurantOwnerClient(cfg),
		Tag:             NewTagClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:          cfg,
		Address:         NewAddressClient(cfg),
		BankingData:     NewBankingDataClient(cfg),
		Customer:        NewCustomerClient(cfg),
		Product:         NewProductClient(cfg),
		Restaurant:      NewRestaurantClient(cfg),
		RestaurantOwner: NewRestaurantOwnerClient(cfg),
		Tag:             NewTagClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Address.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Address.Use(hooks...)
	c.BankingData.Use(hooks...)
	c.Customer.Use(hooks...)
	c.Product.Use(hooks...)
	c.Restaurant.Use(hooks...)
	c.RestaurantOwner.Use(hooks...)
	c.Tag.Use(hooks...)
}

// AddressClient is a client for the Address schema.
type AddressClient struct {
	config
}

// NewAddressClient returns a client for the Address from the given config.
func NewAddressClient(c config) *AddressClient {
	return &AddressClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `address.Hooks(f(g(h())))`.
func (c *AddressClient) Use(hooks ...Hook) {
	c.hooks.Address = append(c.hooks.Address, hooks...)
}

// Create returns a create builder for Address.
func (c *AddressClient) Create() *AddressCreate {
	mutation := newAddressMutation(c.config, OpCreate)
	return &AddressCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Address entities.
func (c *AddressClient) CreateBulk(builders ...*AddressCreate) *AddressCreateBulk {
	return &AddressCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Address.
func (c *AddressClient) Update() *AddressUpdate {
	mutation := newAddressMutation(c.config, OpUpdate)
	return &AddressUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AddressClient) UpdateOne(a *Address) *AddressUpdateOne {
	mutation := newAddressMutation(c.config, OpUpdateOne, withAddress(a))
	return &AddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AddressClient) UpdateOneID(id int) *AddressUpdateOne {
	mutation := newAddressMutation(c.config, OpUpdateOne, withAddressID(id))
	return &AddressUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Address.
func (c *AddressClient) Delete() *AddressDelete {
	mutation := newAddressMutation(c.config, OpDelete)
	return &AddressDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AddressClient) DeleteOne(a *Address) *AddressDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AddressClient) DeleteOneID(id int) *AddressDeleteOne {
	builder := c.Delete().Where(address.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AddressDeleteOne{builder}
}

// Query returns a query builder for Address.
func (c *AddressClient) Query() *AddressQuery {
	return &AddressQuery{config: c.config}
}

// Get returns a Address entity by its id.
func (c *AddressClient) Get(ctx context.Context, id int) (*Address, error) {
	return c.Query().Where(address.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AddressClient) GetX(ctx context.Context, id int) *Address {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AddressClient) Hooks() []Hook {
	return c.hooks.Address
}

// BankingDataClient is a client for the BankingData schema.
type BankingDataClient struct {
	config
}

// NewBankingDataClient returns a client for the BankingData from the given config.
func NewBankingDataClient(c config) *BankingDataClient {
	return &BankingDataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bankingdata.Hooks(f(g(h())))`.
func (c *BankingDataClient) Use(hooks ...Hook) {
	c.hooks.BankingData = append(c.hooks.BankingData, hooks...)
}

// Create returns a create builder for BankingData.
func (c *BankingDataClient) Create() *BankingDataCreate {
	mutation := newBankingDataMutation(c.config, OpCreate)
	return &BankingDataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of BankingData entities.
func (c *BankingDataClient) CreateBulk(builders ...*BankingDataCreate) *BankingDataCreateBulk {
	return &BankingDataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BankingData.
func (c *BankingDataClient) Update() *BankingDataUpdate {
	mutation := newBankingDataMutation(c.config, OpUpdate)
	return &BankingDataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BankingDataClient) UpdateOne(bd *BankingData) *BankingDataUpdateOne {
	mutation := newBankingDataMutation(c.config, OpUpdateOne, withBankingData(bd))
	return &BankingDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BankingDataClient) UpdateOneID(id int) *BankingDataUpdateOne {
	mutation := newBankingDataMutation(c.config, OpUpdateOne, withBankingDataID(id))
	return &BankingDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BankingData.
func (c *BankingDataClient) Delete() *BankingDataDelete {
	mutation := newBankingDataMutation(c.config, OpDelete)
	return &BankingDataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BankingDataClient) DeleteOne(bd *BankingData) *BankingDataDeleteOne {
	return c.DeleteOneID(bd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BankingDataClient) DeleteOneID(id int) *BankingDataDeleteOne {
	builder := c.Delete().Where(bankingdata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BankingDataDeleteOne{builder}
}

// Query returns a query builder for BankingData.
func (c *BankingDataClient) Query() *BankingDataQuery {
	return &BankingDataQuery{config: c.config}
}

// Get returns a BankingData entity by its id.
func (c *BankingDataClient) Get(ctx context.Context, id int) (*BankingData, error) {
	return c.Query().Where(bankingdata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BankingDataClient) GetX(ctx context.Context, id int) *BankingData {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BankingDataClient) Hooks() []Hook {
	return c.hooks.BankingData
}

// CustomerClient is a client for the Customer schema.
type CustomerClient struct {
	config
}

// NewCustomerClient returns a client for the Customer from the given config.
func NewCustomerClient(c config) *CustomerClient {
	return &CustomerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `customer.Hooks(f(g(h())))`.
func (c *CustomerClient) Use(hooks ...Hook) {
	c.hooks.Customer = append(c.hooks.Customer, hooks...)
}

// Create returns a create builder for Customer.
func (c *CustomerClient) Create() *CustomerCreate {
	mutation := newCustomerMutation(c.config, OpCreate)
	return &CustomerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Customer entities.
func (c *CustomerClient) CreateBulk(builders ...*CustomerCreate) *CustomerCreateBulk {
	return &CustomerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Customer.
func (c *CustomerClient) Update() *CustomerUpdate {
	mutation := newCustomerMutation(c.config, OpUpdate)
	return &CustomerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CustomerClient) UpdateOne(cu *Customer) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomer(cu))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CustomerClient) UpdateOneID(id int) *CustomerUpdateOne {
	mutation := newCustomerMutation(c.config, OpUpdateOne, withCustomerID(id))
	return &CustomerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Customer.
func (c *CustomerClient) Delete() *CustomerDelete {
	mutation := newCustomerMutation(c.config, OpDelete)
	return &CustomerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CustomerClient) DeleteOne(cu *Customer) *CustomerDeleteOne {
	return c.DeleteOneID(cu.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CustomerClient) DeleteOneID(id int) *CustomerDeleteOne {
	builder := c.Delete().Where(customer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CustomerDeleteOne{builder}
}

// Query returns a query builder for Customer.
func (c *CustomerClient) Query() *CustomerQuery {
	return &CustomerQuery{config: c.config}
}

// Get returns a Customer entity by its id.
func (c *CustomerClient) Get(ctx context.Context, id int) (*Customer, error) {
	return c.Query().Where(customer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CustomerClient) GetX(ctx context.Context, id int) *Customer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAddress queries the address edge of a Customer.
func (c *CustomerClient) QueryAddress(cu *Customer) *AddressQuery {
	query := &AddressQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := cu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customer.Table, customer.FieldID, id),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, customer.AddressTable, customer.AddressColumn),
		)
		fromV = sqlgraph.Neighbors(cu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CustomerClient) Hooks() []Hook {
	return c.hooks.Customer
}

// ProductClient is a client for the Product schema.
type ProductClient struct {
	config
}

// NewProductClient returns a client for the Product from the given config.
func NewProductClient(c config) *ProductClient {
	return &ProductClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `product.Hooks(f(g(h())))`.
func (c *ProductClient) Use(hooks ...Hook) {
	c.hooks.Product = append(c.hooks.Product, hooks...)
}

// Create returns a create builder for Product.
func (c *ProductClient) Create() *ProductCreate {
	mutation := newProductMutation(c.config, OpCreate)
	return &ProductCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Product entities.
func (c *ProductClient) CreateBulk(builders ...*ProductCreate) *ProductCreateBulk {
	return &ProductCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Product.
func (c *ProductClient) Update() *ProductUpdate {
	mutation := newProductMutation(c.config, OpUpdate)
	return &ProductUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProductClient) UpdateOne(pr *Product) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProduct(pr))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProductClient) UpdateOneID(id int) *ProductUpdateOne {
	mutation := newProductMutation(c.config, OpUpdateOne, withProductID(id))
	return &ProductUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Product.
func (c *ProductClient) Delete() *ProductDelete {
	mutation := newProductMutation(c.config, OpDelete)
	return &ProductDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProductClient) DeleteOne(pr *Product) *ProductDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProductClient) DeleteOneID(id int) *ProductDeleteOne {
	builder := c.Delete().Where(product.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProductDeleteOne{builder}
}

// Query returns a query builder for Product.
func (c *ProductClient) Query() *ProductQuery {
	return &ProductQuery{config: c.config}
}

// Get returns a Product entity by its id.
func (c *ProductClient) Get(ctx context.Context, id int) (*Product, error) {
	return c.Query().Where(product.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProductClient) GetX(ctx context.Context, id int) *Product {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTags queries the tags edge of a Product.
func (c *ProductClient) QueryTags(pr *Product) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, product.TagsTable, product.TagsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRestaurant queries the restaurant edge of a Product.
func (c *ProductClient) QueryRestaurant(pr *Product) *RestaurantQuery {
	query := &RestaurantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(product.Table, product.FieldID, id),
			sqlgraph.To(restaurant.Table, restaurant.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, product.RestaurantTable, product.RestaurantPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProductClient) Hooks() []Hook {
	return c.hooks.Product
}

// RestaurantClient is a client for the Restaurant schema.
type RestaurantClient struct {
	config
}

// NewRestaurantClient returns a client for the Restaurant from the given config.
func NewRestaurantClient(c config) *RestaurantClient {
	return &RestaurantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `restaurant.Hooks(f(g(h())))`.
func (c *RestaurantClient) Use(hooks ...Hook) {
	c.hooks.Restaurant = append(c.hooks.Restaurant, hooks...)
}

// Create returns a create builder for Restaurant.
func (c *RestaurantClient) Create() *RestaurantCreate {
	mutation := newRestaurantMutation(c.config, OpCreate)
	return &RestaurantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Restaurant entities.
func (c *RestaurantClient) CreateBulk(builders ...*RestaurantCreate) *RestaurantCreateBulk {
	return &RestaurantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Restaurant.
func (c *RestaurantClient) Update() *RestaurantUpdate {
	mutation := newRestaurantMutation(c.config, OpUpdate)
	return &RestaurantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RestaurantClient) UpdateOne(r *Restaurant) *RestaurantUpdateOne {
	mutation := newRestaurantMutation(c.config, OpUpdateOne, withRestaurant(r))
	return &RestaurantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RestaurantClient) UpdateOneID(id int) *RestaurantUpdateOne {
	mutation := newRestaurantMutation(c.config, OpUpdateOne, withRestaurantID(id))
	return &RestaurantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Restaurant.
func (c *RestaurantClient) Delete() *RestaurantDelete {
	mutation := newRestaurantMutation(c.config, OpDelete)
	return &RestaurantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RestaurantClient) DeleteOne(r *Restaurant) *RestaurantDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RestaurantClient) DeleteOneID(id int) *RestaurantDeleteOne {
	builder := c.Delete().Where(restaurant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RestaurantDeleteOne{builder}
}

// Query returns a query builder for Restaurant.
func (c *RestaurantClient) Query() *RestaurantQuery {
	return &RestaurantQuery{config: c.config}
}

// Get returns a Restaurant entity by its id.
func (c *RestaurantClient) Get(ctx context.Context, id int) (*Restaurant, error) {
	return c.Query().Where(restaurant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RestaurantClient) GetX(ctx context.Context, id int) *Restaurant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAddress queries the address edge of a Restaurant.
func (c *RestaurantClient) QueryAddress(r *Restaurant) *AddressQuery {
	query := &AddressQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(restaurant.Table, restaurant.FieldID, id),
			sqlgraph.To(address.Table, address.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, restaurant.AddressTable, restaurant.AddressColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTags queries the tags edge of a Restaurant.
func (c *RestaurantClient) QueryTags(r *Restaurant) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(restaurant.Table, restaurant.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, restaurant.TagsTable, restaurant.TagsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwner queries the owner edge of a Restaurant.
func (c *RestaurantClient) QueryOwner(r *Restaurant) *RestaurantOwnerQuery {
	query := &RestaurantOwnerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(restaurant.Table, restaurant.FieldID, id),
			sqlgraph.To(restaurantowner.Table, restaurantowner.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, restaurant.OwnerTable, restaurant.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProducts queries the products edge of a Restaurant.
func (c *RestaurantClient) QueryProducts(r *Restaurant) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(restaurant.Table, restaurant.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, restaurant.ProductsTable, restaurant.ProductsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RestaurantClient) Hooks() []Hook {
	return c.hooks.Restaurant
}

// RestaurantOwnerClient is a client for the RestaurantOwner schema.
type RestaurantOwnerClient struct {
	config
}

// NewRestaurantOwnerClient returns a client for the RestaurantOwner from the given config.
func NewRestaurantOwnerClient(c config) *RestaurantOwnerClient {
	return &RestaurantOwnerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `restaurantowner.Hooks(f(g(h())))`.
func (c *RestaurantOwnerClient) Use(hooks ...Hook) {
	c.hooks.RestaurantOwner = append(c.hooks.RestaurantOwner, hooks...)
}

// Create returns a create builder for RestaurantOwner.
func (c *RestaurantOwnerClient) Create() *RestaurantOwnerCreate {
	mutation := newRestaurantOwnerMutation(c.config, OpCreate)
	return &RestaurantOwnerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of RestaurantOwner entities.
func (c *RestaurantOwnerClient) CreateBulk(builders ...*RestaurantOwnerCreate) *RestaurantOwnerCreateBulk {
	return &RestaurantOwnerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RestaurantOwner.
func (c *RestaurantOwnerClient) Update() *RestaurantOwnerUpdate {
	mutation := newRestaurantOwnerMutation(c.config, OpUpdate)
	return &RestaurantOwnerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RestaurantOwnerClient) UpdateOne(ro *RestaurantOwner) *RestaurantOwnerUpdateOne {
	mutation := newRestaurantOwnerMutation(c.config, OpUpdateOne, withRestaurantOwner(ro))
	return &RestaurantOwnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RestaurantOwnerClient) UpdateOneID(id int) *RestaurantOwnerUpdateOne {
	mutation := newRestaurantOwnerMutation(c.config, OpUpdateOne, withRestaurantOwnerID(id))
	return &RestaurantOwnerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RestaurantOwner.
func (c *RestaurantOwnerClient) Delete() *RestaurantOwnerDelete {
	mutation := newRestaurantOwnerMutation(c.config, OpDelete)
	return &RestaurantOwnerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RestaurantOwnerClient) DeleteOne(ro *RestaurantOwner) *RestaurantOwnerDeleteOne {
	return c.DeleteOneID(ro.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RestaurantOwnerClient) DeleteOneID(id int) *RestaurantOwnerDeleteOne {
	builder := c.Delete().Where(restaurantowner.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RestaurantOwnerDeleteOne{builder}
}

// Query returns a query builder for RestaurantOwner.
func (c *RestaurantOwnerClient) Query() *RestaurantOwnerQuery {
	return &RestaurantOwnerQuery{config: c.config}
}

// Get returns a RestaurantOwner entity by its id.
func (c *RestaurantOwnerClient) Get(ctx context.Context, id int) (*RestaurantOwner, error) {
	return c.Query().Where(restaurantowner.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RestaurantOwnerClient) GetX(ctx context.Context, id int) *RestaurantOwner {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBankingData queries the banking_data edge of a RestaurantOwner.
func (c *RestaurantOwnerClient) QueryBankingData(ro *RestaurantOwner) *BankingDataQuery {
	query := &BankingDataQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ro.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(restaurantowner.Table, restaurantowner.FieldID, id),
			sqlgraph.To(bankingdata.Table, bankingdata.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, restaurantowner.BankingDataTable, restaurantowner.BankingDataColumn),
		)
		fromV = sqlgraph.Neighbors(ro.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRestaurant queries the restaurant edge of a RestaurantOwner.
func (c *RestaurantOwnerClient) QueryRestaurant(ro *RestaurantOwner) *RestaurantQuery {
	query := &RestaurantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ro.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(restaurantowner.Table, restaurantowner.FieldID, id),
			sqlgraph.To(restaurant.Table, restaurant.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, restaurantowner.RestaurantTable, restaurantowner.RestaurantColumn),
		)
		fromV = sqlgraph.Neighbors(ro.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RestaurantOwnerClient) Hooks() []Hook {
	return c.hooks.RestaurantOwner
}

// TagClient is a client for the Tag schema.
type TagClient struct {
	config
}

// NewTagClient returns a client for the Tag from the given config.
func NewTagClient(c config) *TagClient {
	return &TagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tag.Hooks(f(g(h())))`.
func (c *TagClient) Use(hooks ...Hook) {
	c.hooks.Tag = append(c.hooks.Tag, hooks...)
}

// Create returns a create builder for Tag.
func (c *TagClient) Create() *TagCreate {
	mutation := newTagMutation(c.config, OpCreate)
	return &TagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Tag entities.
func (c *TagClient) CreateBulk(builders ...*TagCreate) *TagCreateBulk {
	return &TagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tag.
func (c *TagClient) Update() *TagUpdate {
	mutation := newTagMutation(c.config, OpUpdate)
	return &TagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TagClient) UpdateOne(t *Tag) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTag(t))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TagClient) UpdateOneID(id int) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTagID(id))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tag.
func (c *TagClient) Delete() *TagDelete {
	mutation := newTagMutation(c.config, OpDelete)
	return &TagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TagClient) DeleteOne(t *Tag) *TagDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TagClient) DeleteOneID(id int) *TagDeleteOne {
	builder := c.Delete().Where(tag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TagDeleteOne{builder}
}

// Query returns a query builder for Tag.
func (c *TagClient) Query() *TagQuery {
	return &TagQuery{config: c.config}
}

// Get returns a Tag entity by its id.
func (c *TagClient) Get(ctx context.Context, id int) (*Tag, error) {
	return c.Query().Where(tag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TagClient) GetX(ctx context.Context, id int) *Tag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProduct queries the product edge of a Tag.
func (c *TagClient) QueryProduct(t *Tag) *ProductQuery {
	query := &ProductQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tag.Table, tag.FieldID, id),
			sqlgraph.To(product.Table, product.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, tag.ProductTable, tag.ProductPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRestaurant queries the restaurant edge of a Tag.
func (c *TagClient) QueryRestaurant(t *Tag) *RestaurantQuery {
	query := &RestaurantQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tag.Table, tag.FieldID, id),
			sqlgraph.To(restaurant.Table, restaurant.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, tag.RestaurantTable, tag.RestaurantPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TagClient) Hooks() []Hook {
	return c.hooks.Tag
}
