// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"foodworks.ml/m/internal/generated/ent/address"
	"foodworks.ml/m/internal/generated/ent/bankingdata"
	"foodworks.ml/m/internal/generated/ent/customer"
	"foodworks.ml/m/internal/generated/ent/product"
	"foodworks.ml/m/internal/generated/ent/rating"
	"foodworks.ml/m/internal/generated/ent/restaurant"
	"foodworks.ml/m/internal/generated/ent/restaurantowner"
	"foodworks.ml/m/internal/generated/ent/tag"

	"github.com/facebook/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAddress         = "Address"
	TypeBankingData     = "BankingData"
	TypeCustomer        = "Customer"
	TypeProduct         = "Product"
	TypeRating          = "Rating"
	TypeRestaurant      = "Restaurant"
	TypeRestaurantOwner = "RestaurantOwner"
	TypeTag             = "Tag"
)

// AddressMutation represents an operation that mutate the Addresses
// nodes in the graph.
type AddressMutation struct {
	config
	op            Op
	typ           string
	id            *int
	latitude      *float64
	addlatitude   *float64
	longitude     *float64
	addlongitude  *float64
	streetLine    *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Address, error)
}

var _ ent.Mutation = (*AddressMutation)(nil)

// addressOption allows to manage the mutation configuration using functional options.
type addressOption func(*AddressMutation)

// newAddressMutation creates new mutation for $n.Name.
func newAddressMutation(c config, op Op, opts ...addressOption) *AddressMutation {
	m := &AddressMutation{
		config:        c,
		op:            op,
		typ:           TypeAddress,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAddressID sets the id field of the mutation.
func withAddressID(id int) addressOption {
	return func(m *AddressMutation) {
		var (
			err   error
			once  sync.Once
			value *Address
		)
		m.oldValue = func(ctx context.Context) (*Address, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Address.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAddress sets the old Address of the mutation.
func withAddress(node *Address) addressOption {
	return func(m *AddressMutation) {
		m.oldValue = func(context.Context) (*Address, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AddressMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AddressMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *AddressMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetLatitude sets the latitude field.
func (m *AddressMutation) SetLatitude(f float64) {
	m.latitude = &f
	m.addlatitude = nil
}

// Latitude returns the latitude value in the mutation.
func (m *AddressMutation) Latitude() (r float64, exists bool) {
	v := m.latitude
	if v == nil {
		return
	}
	return *v, true
}

// OldLatitude returns the old latitude value of the Address.
// If the Address object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AddressMutation) OldLatitude(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLatitude is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLatitude requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLatitude: %w", err)
	}
	return oldValue.Latitude, nil
}

// AddLatitude adds f to latitude.
func (m *AddressMutation) AddLatitude(f float64) {
	if m.addlatitude != nil {
		*m.addlatitude += f
	} else {
		m.addlatitude = &f
	}
}

// AddedLatitude returns the value that was added to the latitude field in this mutation.
func (m *AddressMutation) AddedLatitude() (r float64, exists bool) {
	v := m.addlatitude
	if v == nil {
		return
	}
	return *v, true
}

// ResetLatitude reset all changes of the "latitude" field.
func (m *AddressMutation) ResetLatitude() {
	m.latitude = nil
	m.addlatitude = nil
}

// SetLongitude sets the longitude field.
func (m *AddressMutation) SetLongitude(f float64) {
	m.longitude = &f
	m.addlongitude = nil
}

// Longitude returns the longitude value in the mutation.
func (m *AddressMutation) Longitude() (r float64, exists bool) {
	v := m.longitude
	if v == nil {
		return
	}
	return *v, true
}

// OldLongitude returns the old longitude value of the Address.
// If the Address object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AddressMutation) OldLongitude(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLongitude is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLongitude requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLongitude: %w", err)
	}
	return oldValue.Longitude, nil
}

// AddLongitude adds f to longitude.
func (m *AddressMutation) AddLongitude(f float64) {
	if m.addlongitude != nil {
		*m.addlongitude += f
	} else {
		m.addlongitude = &f
	}
}

// AddedLongitude returns the value that was added to the longitude field in this mutation.
func (m *AddressMutation) AddedLongitude() (r float64, exists bool) {
	v := m.addlongitude
	if v == nil {
		return
	}
	return *v, true
}

// ResetLongitude reset all changes of the "longitude" field.
func (m *AddressMutation) ResetLongitude() {
	m.longitude = nil
	m.addlongitude = nil
}

// SetStreetLine sets the streetLine field.
func (m *AddressMutation) SetStreetLine(s string) {
	m.streetLine = &s
}

// StreetLine returns the streetLine value in the mutation.
func (m *AddressMutation) StreetLine() (r string, exists bool) {
	v := m.streetLine
	if v == nil {
		return
	}
	return *v, true
}

// OldStreetLine returns the old streetLine value of the Address.
// If the Address object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *AddressMutation) OldStreetLine(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldStreetLine is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldStreetLine requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStreetLine: %w", err)
	}
	return oldValue.StreetLine, nil
}

// ResetStreetLine reset all changes of the "streetLine" field.
func (m *AddressMutation) ResetStreetLine() {
	m.streetLine = nil
}

// Op returns the operation name.
func (m *AddressMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Address).
func (m *AddressMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *AddressMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.latitude != nil {
		fields = append(fields, address.FieldLatitude)
	}
	if m.longitude != nil {
		fields = append(fields, address.FieldLongitude)
	}
	if m.streetLine != nil {
		fields = append(fields, address.FieldStreetLine)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *AddressMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case address.FieldLatitude:
		return m.Latitude()
	case address.FieldLongitude:
		return m.Longitude()
	case address.FieldStreetLine:
		return m.StreetLine()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *AddressMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case address.FieldLatitude:
		return m.OldLatitude(ctx)
	case address.FieldLongitude:
		return m.OldLongitude(ctx)
	case address.FieldStreetLine:
		return m.OldStreetLine(ctx)
	}
	return nil, fmt.Errorf("unknown Address field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *AddressMutation) SetField(name string, value ent.Value) error {
	switch name {
	case address.FieldLatitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLatitude(v)
		return nil
	case address.FieldLongitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLongitude(v)
		return nil
	case address.FieldStreetLine:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStreetLine(v)
		return nil
	}
	return fmt.Errorf("unknown Address field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *AddressMutation) AddedFields() []string {
	var fields []string
	if m.addlatitude != nil {
		fields = append(fields, address.FieldLatitude)
	}
	if m.addlongitude != nil {
		fields = append(fields, address.FieldLongitude)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *AddressMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case address.FieldLatitude:
		return m.AddedLatitude()
	case address.FieldLongitude:
		return m.AddedLongitude()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *AddressMutation) AddField(name string, value ent.Value) error {
	switch name {
	case address.FieldLatitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLatitude(v)
		return nil
	case address.FieldLongitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLongitude(v)
		return nil
	}
	return fmt.Errorf("unknown Address numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *AddressMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *AddressMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *AddressMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Address nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *AddressMutation) ResetField(name string) error {
	switch name {
	case address.FieldLatitude:
		m.ResetLatitude()
		return nil
	case address.FieldLongitude:
		m.ResetLongitude()
		return nil
	case address.FieldStreetLine:
		m.ResetStreetLine()
		return nil
	}
	return fmt.Errorf("unknown Address field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *AddressMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *AddressMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *AddressMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *AddressMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *AddressMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *AddressMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *AddressMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Address unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *AddressMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Address edge %s", name)
}

// BankingDataMutation represents an operation that mutate the BankingDataSlice
// nodes in the graph.
type BankingDataMutation struct {
	config
	op            Op
	typ           string
	id            *int
	bank_account  *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*BankingData, error)
}

var _ ent.Mutation = (*BankingDataMutation)(nil)

// bankingdataOption allows to manage the mutation configuration using functional options.
type bankingdataOption func(*BankingDataMutation)

// newBankingDataMutation creates new mutation for $n.Name.
func newBankingDataMutation(c config, op Op, opts ...bankingdataOption) *BankingDataMutation {
	m := &BankingDataMutation{
		config:        c,
		op:            op,
		typ:           TypeBankingData,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBankingDataID sets the id field of the mutation.
func withBankingDataID(id int) bankingdataOption {
	return func(m *BankingDataMutation) {
		var (
			err   error
			once  sync.Once
			value *BankingData
		)
		m.oldValue = func(ctx context.Context) (*BankingData, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().BankingData.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBankingData sets the old BankingData of the mutation.
func withBankingData(node *BankingData) bankingdataOption {
	return func(m *BankingDataMutation) {
		m.oldValue = func(context.Context) (*BankingData, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BankingDataMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BankingDataMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *BankingDataMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetBankAccount sets the bank_account field.
func (m *BankingDataMutation) SetBankAccount(s string) {
	m.bank_account = &s
}

// BankAccount returns the bank_account value in the mutation.
func (m *BankingDataMutation) BankAccount() (r string, exists bool) {
	v := m.bank_account
	if v == nil {
		return
	}
	return *v, true
}

// OldBankAccount returns the old bank_account value of the BankingData.
// If the BankingData object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BankingDataMutation) OldBankAccount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBankAccount is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBankAccount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBankAccount: %w", err)
	}
	return oldValue.BankAccount, nil
}

// ResetBankAccount reset all changes of the "bank_account" field.
func (m *BankingDataMutation) ResetBankAccount() {
	m.bank_account = nil
}

// Op returns the operation name.
func (m *BankingDataMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (BankingData).
func (m *BankingDataMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *BankingDataMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.bank_account != nil {
		fields = append(fields, bankingdata.FieldBankAccount)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *BankingDataMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bankingdata.FieldBankAccount:
		return m.BankAccount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *BankingDataMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bankingdata.FieldBankAccount:
		return m.OldBankAccount(ctx)
	}
	return nil, fmt.Errorf("unknown BankingData field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *BankingDataMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bankingdata.FieldBankAccount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBankAccount(v)
		return nil
	}
	return fmt.Errorf("unknown BankingData field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *BankingDataMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *BankingDataMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *BankingDataMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown BankingData numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *BankingDataMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *BankingDataMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *BankingDataMutation) ClearField(name string) error {
	return fmt.Errorf("unknown BankingData nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *BankingDataMutation) ResetField(name string) error {
	switch name {
	case bankingdata.FieldBankAccount:
		m.ResetBankAccount()
		return nil
	}
	return fmt.Errorf("unknown BankingData field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *BankingDataMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *BankingDataMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *BankingDataMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *BankingDataMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *BankingDataMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *BankingDataMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *BankingDataMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown BankingData unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *BankingDataMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown BankingData edge %s", name)
}

// CustomerMutation represents an operation that mutate the Customers
// nodes in the graph.
type CustomerMutation struct {
	config
	op             Op
	typ            string
	id             *int
	kratos_id      *string
	name           *string
	email          *string
	phone          *string
	clearedFields  map[string]struct{}
	address        *int
	clearedaddress bool
	done           bool
	oldValue       func(context.Context) (*Customer, error)
}

var _ ent.Mutation = (*CustomerMutation)(nil)

// customerOption allows to manage the mutation configuration using functional options.
type customerOption func(*CustomerMutation)

// newCustomerMutation creates new mutation for $n.Name.
func newCustomerMutation(c config, op Op, opts ...customerOption) *CustomerMutation {
	m := &CustomerMutation{
		config:        c,
		op:            op,
		typ:           TypeCustomer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCustomerID sets the id field of the mutation.
func withCustomerID(id int) customerOption {
	return func(m *CustomerMutation) {
		var (
			err   error
			once  sync.Once
			value *Customer
		)
		m.oldValue = func(ctx context.Context) (*Customer, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Customer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCustomer sets the old Customer of the mutation.
func withCustomer(node *Customer) customerOption {
	return func(m *CustomerMutation) {
		m.oldValue = func(context.Context) (*Customer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CustomerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CustomerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *CustomerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetKratosID sets the kratos_id field.
func (m *CustomerMutation) SetKratosID(s string) {
	m.kratos_id = &s
}

// KratosID returns the kratos_id value in the mutation.
func (m *CustomerMutation) KratosID() (r string, exists bool) {
	v := m.kratos_id
	if v == nil {
		return
	}
	return *v, true
}

// OldKratosID returns the old kratos_id value of the Customer.
// If the Customer object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CustomerMutation) OldKratosID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldKratosID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldKratosID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKratosID: %w", err)
	}
	return oldValue.KratosID, nil
}

// ResetKratosID reset all changes of the "kratos_id" field.
func (m *CustomerMutation) ResetKratosID() {
	m.kratos_id = nil
}

// SetName sets the name field.
func (m *CustomerMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *CustomerMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Customer.
// If the Customer object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CustomerMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *CustomerMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the email field.
func (m *CustomerMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the email value in the mutation.
func (m *CustomerMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old email value of the Customer.
// If the Customer object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CustomerMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail reset all changes of the "email" field.
func (m *CustomerMutation) ResetEmail() {
	m.email = nil
}

// SetPhone sets the phone field.
func (m *CustomerMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the phone value in the mutation.
func (m *CustomerMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old phone value of the Customer.
// If the Customer object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *CustomerMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPhone is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone reset all changes of the "phone" field.
func (m *CustomerMutation) ResetPhone() {
	m.phone = nil
}

// SetAddressID sets the address edge to Address by id.
func (m *CustomerMutation) SetAddressID(id int) {
	m.address = &id
}

// ClearAddress clears the address edge to Address.
func (m *CustomerMutation) ClearAddress() {
	m.clearedaddress = true
}

// AddressCleared returns if the edge address was cleared.
func (m *CustomerMutation) AddressCleared() bool {
	return m.clearedaddress
}

// AddressID returns the address id in the mutation.
func (m *CustomerMutation) AddressID() (id int, exists bool) {
	if m.address != nil {
		return *m.address, true
	}
	return
}

// AddressIDs returns the address ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// AddressID instead. It exists only for internal usage by the builders.
func (m *CustomerMutation) AddressIDs() (ids []int) {
	if id := m.address; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAddress reset all changes of the "address" edge.
func (m *CustomerMutation) ResetAddress() {
	m.address = nil
	m.clearedaddress = false
}

// Op returns the operation name.
func (m *CustomerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Customer).
func (m *CustomerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *CustomerMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.kratos_id != nil {
		fields = append(fields, customer.FieldKratosID)
	}
	if m.name != nil {
		fields = append(fields, customer.FieldName)
	}
	if m.email != nil {
		fields = append(fields, customer.FieldEmail)
	}
	if m.phone != nil {
		fields = append(fields, customer.FieldPhone)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *CustomerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case customer.FieldKratosID:
		return m.KratosID()
	case customer.FieldName:
		return m.Name()
	case customer.FieldEmail:
		return m.Email()
	case customer.FieldPhone:
		return m.Phone()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *CustomerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case customer.FieldKratosID:
		return m.OldKratosID(ctx)
	case customer.FieldName:
		return m.OldName(ctx)
	case customer.FieldEmail:
		return m.OldEmail(ctx)
	case customer.FieldPhone:
		return m.OldPhone(ctx)
	}
	return nil, fmt.Errorf("unknown Customer field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CustomerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case customer.FieldKratosID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKratosID(v)
		return nil
	case customer.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case customer.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case customer.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	}
	return fmt.Errorf("unknown Customer field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *CustomerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *CustomerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *CustomerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Customer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *CustomerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *CustomerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *CustomerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Customer nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *CustomerMutation) ResetField(name string) error {
	switch name {
	case customer.FieldKratosID:
		m.ResetKratosID()
		return nil
	case customer.FieldName:
		m.ResetName()
		return nil
	case customer.FieldEmail:
		m.ResetEmail()
		return nil
	case customer.FieldPhone:
		m.ResetPhone()
		return nil
	}
	return fmt.Errorf("unknown Customer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *CustomerMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.address != nil {
		edges = append(edges, customer.EdgeAddress)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *CustomerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case customer.EdgeAddress:
		if id := m.address; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *CustomerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *CustomerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *CustomerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedaddress {
		edges = append(edges, customer.EdgeAddress)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *CustomerMutation) EdgeCleared(name string) bool {
	switch name {
	case customer.EdgeAddress:
		return m.clearedaddress
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *CustomerMutation) ClearEdge(name string) error {
	switch name {
	case customer.EdgeAddress:
		m.ClearAddress()
		return nil
	}
	return fmt.Errorf("unknown Customer unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *CustomerMutation) ResetEdge(name string) error {
	switch name {
	case customer.EdgeAddress:
		m.ResetAddress()
		return nil
	}
	return fmt.Errorf("unknown Customer edge %s", name)
}

// ProductMutation represents an operation that mutate the Products
// nodes in the graph.
type ProductMutation struct {
	config
	op                Op
	typ               string
	id                *int
	name              *string
	description       *string
	cost              *int
	addcost           *int
	is_active         *bool
	clearedFields     map[string]struct{}
	tags              map[int]struct{}
	removedtags       map[int]struct{}
	clearedtags       bool
	restaurant        map[int]struct{}
	removedrestaurant map[int]struct{}
	clearedrestaurant bool
	done              bool
	oldValue          func(context.Context) (*Product, error)
}

var _ ent.Mutation = (*ProductMutation)(nil)

// productOption allows to manage the mutation configuration using functional options.
type productOption func(*ProductMutation)

// newProductMutation creates new mutation for $n.Name.
func newProductMutation(c config, op Op, opts ...productOption) *ProductMutation {
	m := &ProductMutation{
		config:        c,
		op:            op,
		typ:           TypeProduct,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProductID sets the id field of the mutation.
func withProductID(id int) productOption {
	return func(m *ProductMutation) {
		var (
			err   error
			once  sync.Once
			value *Product
		)
		m.oldValue = func(ctx context.Context) (*Product, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Product.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProduct sets the old Product of the mutation.
func withProduct(node *Product) productOption {
	return func(m *ProductMutation) {
		m.oldValue = func(context.Context) (*Product, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProductMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProductMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ProductMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *ProductMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *ProductMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Product.
// If the Product object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProductMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *ProductMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the description field.
func (m *ProductMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the description value in the mutation.
func (m *ProductMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old description value of the Product.
// If the Product object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProductMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDescription is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of description.
func (m *ProductMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[product.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the field description was cleared in this mutation.
func (m *ProductMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[product.FieldDescription]
	return ok
}

// ResetDescription reset all changes of the "description" field.
func (m *ProductMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, product.FieldDescription)
}

// SetCost sets the cost field.
func (m *ProductMutation) SetCost(i int) {
	m.cost = &i
	m.addcost = nil
}

// Cost returns the cost value in the mutation.
func (m *ProductMutation) Cost() (r int, exists bool) {
	v := m.cost
	if v == nil {
		return
	}
	return *v, true
}

// OldCost returns the old cost value of the Product.
// If the Product object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProductMutation) OldCost(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCost is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCost requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCost: %w", err)
	}
	return oldValue.Cost, nil
}

// AddCost adds i to cost.
func (m *ProductMutation) AddCost(i int) {
	if m.addcost != nil {
		*m.addcost += i
	} else {
		m.addcost = &i
	}
}

// AddedCost returns the value that was added to the cost field in this mutation.
func (m *ProductMutation) AddedCost() (r int, exists bool) {
	v := m.addcost
	if v == nil {
		return
	}
	return *v, true
}

// ResetCost reset all changes of the "cost" field.
func (m *ProductMutation) ResetCost() {
	m.cost = nil
	m.addcost = nil
}

// SetIsActive sets the is_active field.
func (m *ProductMutation) SetIsActive(b bool) {
	m.is_active = &b
}

// IsActive returns the is_active value in the mutation.
func (m *ProductMutation) IsActive() (r bool, exists bool) {
	v := m.is_active
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old is_active value of the Product.
// If the Product object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProductMutation) OldIsActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIsActive is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsActive: %w", err)
	}
	return oldValue.IsActive, nil
}

// ResetIsActive reset all changes of the "is_active" field.
func (m *ProductMutation) ResetIsActive() {
	m.is_active = nil
}

// AddTagIDs adds the tags edge to Tag by ids.
func (m *ProductMutation) AddTagIDs(ids ...int) {
	if m.tags == nil {
		m.tags = make(map[int]struct{})
	}
	for i := range ids {
		m.tags[ids[i]] = struct{}{}
	}
}

// ClearTags clears the tags edge to Tag.
func (m *ProductMutation) ClearTags() {
	m.clearedtags = true
}

// TagsCleared returns if the edge tags was cleared.
func (m *ProductMutation) TagsCleared() bool {
	return m.clearedtags
}

// RemoveTagIDs removes the tags edge to Tag by ids.
func (m *ProductMutation) RemoveTagIDs(ids ...int) {
	if m.removedtags == nil {
		m.removedtags = make(map[int]struct{})
	}
	for i := range ids {
		m.removedtags[ids[i]] = struct{}{}
	}
}

// RemovedTags returns the removed ids of tags.
func (m *ProductMutation) RemovedTagsIDs() (ids []int) {
	for id := range m.removedtags {
		ids = append(ids, id)
	}
	return
}

// TagsIDs returns the tags ids in the mutation.
func (m *ProductMutation) TagsIDs() (ids []int) {
	for id := range m.tags {
		ids = append(ids, id)
	}
	return
}

// ResetTags reset all changes of the "tags" edge.
func (m *ProductMutation) ResetTags() {
	m.tags = nil
	m.clearedtags = false
	m.removedtags = nil
}

// AddRestaurantIDs adds the restaurant edge to Restaurant by ids.
func (m *ProductMutation) AddRestaurantIDs(ids ...int) {
	if m.restaurant == nil {
		m.restaurant = make(map[int]struct{})
	}
	for i := range ids {
		m.restaurant[ids[i]] = struct{}{}
	}
}

// ClearRestaurant clears the restaurant edge to Restaurant.
func (m *ProductMutation) ClearRestaurant() {
	m.clearedrestaurant = true
}

// RestaurantCleared returns if the edge restaurant was cleared.
func (m *ProductMutation) RestaurantCleared() bool {
	return m.clearedrestaurant
}

// RemoveRestaurantIDs removes the restaurant edge to Restaurant by ids.
func (m *ProductMutation) RemoveRestaurantIDs(ids ...int) {
	if m.removedrestaurant == nil {
		m.removedrestaurant = make(map[int]struct{})
	}
	for i := range ids {
		m.removedrestaurant[ids[i]] = struct{}{}
	}
}

// RemovedRestaurant returns the removed ids of restaurant.
func (m *ProductMutation) RemovedRestaurantIDs() (ids []int) {
	for id := range m.removedrestaurant {
		ids = append(ids, id)
	}
	return
}

// RestaurantIDs returns the restaurant ids in the mutation.
func (m *ProductMutation) RestaurantIDs() (ids []int) {
	for id := range m.restaurant {
		ids = append(ids, id)
	}
	return
}

// ResetRestaurant reset all changes of the "restaurant" edge.
func (m *ProductMutation) ResetRestaurant() {
	m.restaurant = nil
	m.clearedrestaurant = false
	m.removedrestaurant = nil
}

// Op returns the operation name.
func (m *ProductMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Product).
func (m *ProductMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ProductMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, product.FieldName)
	}
	if m.description != nil {
		fields = append(fields, product.FieldDescription)
	}
	if m.cost != nil {
		fields = append(fields, product.FieldCost)
	}
	if m.is_active != nil {
		fields = append(fields, product.FieldIsActive)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ProductMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case product.FieldName:
		return m.Name()
	case product.FieldDescription:
		return m.Description()
	case product.FieldCost:
		return m.Cost()
	case product.FieldIsActive:
		return m.IsActive()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ProductMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case product.FieldName:
		return m.OldName(ctx)
	case product.FieldDescription:
		return m.OldDescription(ctx)
	case product.FieldCost:
		return m.OldCost(ctx)
	case product.FieldIsActive:
		return m.OldIsActive(ctx)
	}
	return nil, fmt.Errorf("unknown Product field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ProductMutation) SetField(name string, value ent.Value) error {
	switch name {
	case product.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case product.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case product.FieldCost:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCost(v)
		return nil
	case product.FieldIsActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	}
	return fmt.Errorf("unknown Product field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ProductMutation) AddedFields() []string {
	var fields []string
	if m.addcost != nil {
		fields = append(fields, product.FieldCost)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ProductMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case product.FieldCost:
		return m.AddedCost()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ProductMutation) AddField(name string, value ent.Value) error {
	switch name {
	case product.FieldCost:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCost(v)
		return nil
	}
	return fmt.Errorf("unknown Product numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ProductMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(product.FieldDescription) {
		fields = append(fields, product.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ProductMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProductMutation) ClearField(name string) error {
	switch name {
	case product.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Product nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ProductMutation) ResetField(name string) error {
	switch name {
	case product.FieldName:
		m.ResetName()
		return nil
	case product.FieldDescription:
		m.ResetDescription()
		return nil
	case product.FieldCost:
		m.ResetCost()
		return nil
	case product.FieldIsActive:
		m.ResetIsActive()
		return nil
	}
	return fmt.Errorf("unknown Product field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ProductMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.tags != nil {
		edges = append(edges, product.EdgeTags)
	}
	if m.restaurant != nil {
		edges = append(edges, product.EdgeRestaurant)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ProductMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case product.EdgeTags:
		ids := make([]ent.Value, 0, len(m.tags))
		for id := range m.tags {
			ids = append(ids, id)
		}
		return ids
	case product.EdgeRestaurant:
		ids := make([]ent.Value, 0, len(m.restaurant))
		for id := range m.restaurant {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ProductMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedtags != nil {
		edges = append(edges, product.EdgeTags)
	}
	if m.removedrestaurant != nil {
		edges = append(edges, product.EdgeRestaurant)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ProductMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case product.EdgeTags:
		ids := make([]ent.Value, 0, len(m.removedtags))
		for id := range m.removedtags {
			ids = append(ids, id)
		}
		return ids
	case product.EdgeRestaurant:
		ids := make([]ent.Value, 0, len(m.removedrestaurant))
		for id := range m.removedrestaurant {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ProductMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtags {
		edges = append(edges, product.EdgeTags)
	}
	if m.clearedrestaurant {
		edges = append(edges, product.EdgeRestaurant)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ProductMutation) EdgeCleared(name string) bool {
	switch name {
	case product.EdgeTags:
		return m.clearedtags
	case product.EdgeRestaurant:
		return m.clearedrestaurant
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ProductMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Product unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ProductMutation) ResetEdge(name string) error {
	switch name {
	case product.EdgeTags:
		m.ResetTags()
		return nil
	case product.EdgeRestaurant:
		m.ResetRestaurant()
		return nil
	}
	return fmt.Errorf("unknown Product edge %s", name)
}

// RatingMutation represents an operation that mutate the Ratings
// nodes in the graph.
type RatingMutation struct {
	config
	op              Op
	typ             string
	id              *int
	_ProductRate    *int
	add_ProductRate *int
	_ProductID      *int
	add_ProductID   *int
	_CustomerID     *int
	add_CustomerID  *int
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Rating, error)
}

var _ ent.Mutation = (*RatingMutation)(nil)

// ratingOption allows to manage the mutation configuration using functional options.
type ratingOption func(*RatingMutation)

// newRatingMutation creates new mutation for $n.Name.
func newRatingMutation(c config, op Op, opts ...ratingOption) *RatingMutation {
	m := &RatingMutation{
		config:        c,
		op:            op,
		typ:           TypeRating,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRatingID sets the id field of the mutation.
func withRatingID(id int) ratingOption {
	return func(m *RatingMutation) {
		var (
			err   error
			once  sync.Once
			value *Rating
		)
		m.oldValue = func(ctx context.Context) (*Rating, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Rating.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRating sets the old Rating of the mutation.
func withRating(node *Rating) ratingOption {
	return func(m *RatingMutation) {
		m.oldValue = func(context.Context) (*Rating, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RatingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RatingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RatingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetProductRate sets the ProductRate field.
func (m *RatingMutation) SetProductRate(i int) {
	m._ProductRate = &i
	m.add_ProductRate = nil
}

// ProductRate returns the ProductRate value in the mutation.
func (m *RatingMutation) ProductRate() (r int, exists bool) {
	v := m._ProductRate
	if v == nil {
		return
	}
	return *v, true
}

// OldProductRate returns the old ProductRate value of the Rating.
// If the Rating object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RatingMutation) OldProductRate(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProductRate is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProductRate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductRate: %w", err)
	}
	return oldValue.ProductRate, nil
}

// AddProductRate adds i to ProductRate.
func (m *RatingMutation) AddProductRate(i int) {
	if m.add_ProductRate != nil {
		*m.add_ProductRate += i
	} else {
		m.add_ProductRate = &i
	}
}

// AddedProductRate returns the value that was added to the ProductRate field in this mutation.
func (m *RatingMutation) AddedProductRate() (r int, exists bool) {
	v := m.add_ProductRate
	if v == nil {
		return
	}
	return *v, true
}

// ResetProductRate reset all changes of the "ProductRate" field.
func (m *RatingMutation) ResetProductRate() {
	m._ProductRate = nil
	m.add_ProductRate = nil
}

// SetProductID sets the ProductID field.
func (m *RatingMutation) SetProductID(i int) {
	m._ProductID = &i
	m.add_ProductID = nil
}

// ProductID returns the ProductID value in the mutation.
func (m *RatingMutation) ProductID() (r int, exists bool) {
	v := m._ProductID
	if v == nil {
		return
	}
	return *v, true
}

// OldProductID returns the old ProductID value of the Rating.
// If the Rating object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RatingMutation) OldProductID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProductID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProductID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductID: %w", err)
	}
	return oldValue.ProductID, nil
}

// AddProductID adds i to ProductID.
func (m *RatingMutation) AddProductID(i int) {
	if m.add_ProductID != nil {
		*m.add_ProductID += i
	} else {
		m.add_ProductID = &i
	}
}

// AddedProductID returns the value that was added to the ProductID field in this mutation.
func (m *RatingMutation) AddedProductID() (r int, exists bool) {
	v := m.add_ProductID
	if v == nil {
		return
	}
	return *v, true
}

// ResetProductID reset all changes of the "ProductID" field.
func (m *RatingMutation) ResetProductID() {
	m._ProductID = nil
	m.add_ProductID = nil
}

// SetCustomerID sets the CustomerID field.
func (m *RatingMutation) SetCustomerID(i int) {
	m._CustomerID = &i
	m.add_CustomerID = nil
}

// CustomerID returns the CustomerID value in the mutation.
func (m *RatingMutation) CustomerID() (r int, exists bool) {
	v := m._CustomerID
	if v == nil {
		return
	}
	return *v, true
}

// OldCustomerID returns the old CustomerID value of the Rating.
// If the Rating object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RatingMutation) OldCustomerID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCustomerID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCustomerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustomerID: %w", err)
	}
	return oldValue.CustomerID, nil
}

// AddCustomerID adds i to CustomerID.
func (m *RatingMutation) AddCustomerID(i int) {
	if m.add_CustomerID != nil {
		*m.add_CustomerID += i
	} else {
		m.add_CustomerID = &i
	}
}

// AddedCustomerID returns the value that was added to the CustomerID field in this mutation.
func (m *RatingMutation) AddedCustomerID() (r int, exists bool) {
	v := m.add_CustomerID
	if v == nil {
		return
	}
	return *v, true
}

// ResetCustomerID reset all changes of the "CustomerID" field.
func (m *RatingMutation) ResetCustomerID() {
	m._CustomerID = nil
	m.add_CustomerID = nil
}

// Op returns the operation name.
func (m *RatingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Rating).
func (m *RatingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RatingMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._ProductRate != nil {
		fields = append(fields, rating.FieldProductRate)
	}
	if m._ProductID != nil {
		fields = append(fields, rating.FieldProductID)
	}
	if m._CustomerID != nil {
		fields = append(fields, rating.FieldCustomerID)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RatingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rating.FieldProductRate:
		return m.ProductRate()
	case rating.FieldProductID:
		return m.ProductID()
	case rating.FieldCustomerID:
		return m.CustomerID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RatingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rating.FieldProductRate:
		return m.OldProductRate(ctx)
	case rating.FieldProductID:
		return m.OldProductID(ctx)
	case rating.FieldCustomerID:
		return m.OldCustomerID(ctx)
	}
	return nil, fmt.Errorf("unknown Rating field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RatingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rating.FieldProductRate:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductRate(v)
		return nil
	case rating.FieldProductID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductID(v)
		return nil
	case rating.FieldCustomerID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustomerID(v)
		return nil
	}
	return fmt.Errorf("unknown Rating field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RatingMutation) AddedFields() []string {
	var fields []string
	if m.add_ProductRate != nil {
		fields = append(fields, rating.FieldProductRate)
	}
	if m.add_ProductID != nil {
		fields = append(fields, rating.FieldProductID)
	}
	if m.add_CustomerID != nil {
		fields = append(fields, rating.FieldCustomerID)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RatingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case rating.FieldProductRate:
		return m.AddedProductRate()
	case rating.FieldProductID:
		return m.AddedProductID()
	case rating.FieldCustomerID:
		return m.AddedCustomerID()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RatingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case rating.FieldProductRate:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProductRate(v)
		return nil
	case rating.FieldProductID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProductID(v)
		return nil
	case rating.FieldCustomerID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCustomerID(v)
		return nil
	}
	return fmt.Errorf("unknown Rating numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RatingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RatingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RatingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Rating nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RatingMutation) ResetField(name string) error {
	switch name {
	case rating.FieldProductRate:
		m.ResetProductRate()
		return nil
	case rating.FieldProductID:
		m.ResetProductID()
		return nil
	case rating.FieldCustomerID:
		m.ResetCustomerID()
		return nil
	}
	return fmt.Errorf("unknown Rating field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RatingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RatingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RatingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RatingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RatingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RatingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RatingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Rating unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RatingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Rating edge %s", name)
}

// RestaurantMutation represents an operation that mutate the Restaurants
// nodes in the graph.
type RestaurantMutation struct {
	config
	op              Op
	typ             string
	id              *int
	name            *string
	description     *string
	clearedFields   map[string]struct{}
	address         *int
	clearedaddress  bool
	tags            map[int]struct{}
	removedtags     map[int]struct{}
	clearedtags     bool
	owner           map[int]struct{}
	removedowner    map[int]struct{}
	clearedowner    bool
	products        map[int]struct{}
	removedproducts map[int]struct{}
	clearedproducts bool
	done            bool
	oldValue        func(context.Context) (*Restaurant, error)
}

var _ ent.Mutation = (*RestaurantMutation)(nil)

// restaurantOption allows to manage the mutation configuration using functional options.
type restaurantOption func(*RestaurantMutation)

// newRestaurantMutation creates new mutation for $n.Name.
func newRestaurantMutation(c config, op Op, opts ...restaurantOption) *RestaurantMutation {
	m := &RestaurantMutation{
		config:        c,
		op:            op,
		typ:           TypeRestaurant,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRestaurantID sets the id field of the mutation.
func withRestaurantID(id int) restaurantOption {
	return func(m *RestaurantMutation) {
		var (
			err   error
			once  sync.Once
			value *Restaurant
		)
		m.oldValue = func(ctx context.Context) (*Restaurant, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Restaurant.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRestaurant sets the old Restaurant of the mutation.
func withRestaurant(node *Restaurant) restaurantOption {
	return func(m *RestaurantMutation) {
		m.oldValue = func(context.Context) (*Restaurant, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RestaurantMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RestaurantMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RestaurantMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *RestaurantMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *RestaurantMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Restaurant.
// If the Restaurant object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RestaurantMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *RestaurantMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the description field.
func (m *RestaurantMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the description value in the mutation.
func (m *RestaurantMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old description value of the Restaurant.
// If the Restaurant object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RestaurantMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDescription is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of description.
func (m *RestaurantMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[restaurant.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the field description was cleared in this mutation.
func (m *RestaurantMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[restaurant.FieldDescription]
	return ok
}

// ResetDescription reset all changes of the "description" field.
func (m *RestaurantMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, restaurant.FieldDescription)
}

// SetAddressID sets the address edge to Address by id.
func (m *RestaurantMutation) SetAddressID(id int) {
	m.address = &id
}

// ClearAddress clears the address edge to Address.
func (m *RestaurantMutation) ClearAddress() {
	m.clearedaddress = true
}

// AddressCleared returns if the edge address was cleared.
func (m *RestaurantMutation) AddressCleared() bool {
	return m.clearedaddress
}

// AddressID returns the address id in the mutation.
func (m *RestaurantMutation) AddressID() (id int, exists bool) {
	if m.address != nil {
		return *m.address, true
	}
	return
}

// AddressIDs returns the address ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// AddressID instead. It exists only for internal usage by the builders.
func (m *RestaurantMutation) AddressIDs() (ids []int) {
	if id := m.address; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAddress reset all changes of the "address" edge.
func (m *RestaurantMutation) ResetAddress() {
	m.address = nil
	m.clearedaddress = false
}

// AddTagIDs adds the tags edge to Tag by ids.
func (m *RestaurantMutation) AddTagIDs(ids ...int) {
	if m.tags == nil {
		m.tags = make(map[int]struct{})
	}
	for i := range ids {
		m.tags[ids[i]] = struct{}{}
	}
}

// ClearTags clears the tags edge to Tag.
func (m *RestaurantMutation) ClearTags() {
	m.clearedtags = true
}

// TagsCleared returns if the edge tags was cleared.
func (m *RestaurantMutation) TagsCleared() bool {
	return m.clearedtags
}

// RemoveTagIDs removes the tags edge to Tag by ids.
func (m *RestaurantMutation) RemoveTagIDs(ids ...int) {
	if m.removedtags == nil {
		m.removedtags = make(map[int]struct{})
	}
	for i := range ids {
		m.removedtags[ids[i]] = struct{}{}
	}
}

// RemovedTags returns the removed ids of tags.
func (m *RestaurantMutation) RemovedTagsIDs() (ids []int) {
	for id := range m.removedtags {
		ids = append(ids, id)
	}
	return
}

// TagsIDs returns the tags ids in the mutation.
func (m *RestaurantMutation) TagsIDs() (ids []int) {
	for id := range m.tags {
		ids = append(ids, id)
	}
	return
}

// ResetTags reset all changes of the "tags" edge.
func (m *RestaurantMutation) ResetTags() {
	m.tags = nil
	m.clearedtags = false
	m.removedtags = nil
}

// AddOwnerIDs adds the owner edge to RestaurantOwner by ids.
func (m *RestaurantMutation) AddOwnerIDs(ids ...int) {
	if m.owner == nil {
		m.owner = make(map[int]struct{})
	}
	for i := range ids {
		m.owner[ids[i]] = struct{}{}
	}
}

// ClearOwner clears the owner edge to RestaurantOwner.
func (m *RestaurantMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared returns if the edge owner was cleared.
func (m *RestaurantMutation) OwnerCleared() bool {
	return m.clearedowner
}

// RemoveOwnerIDs removes the owner edge to RestaurantOwner by ids.
func (m *RestaurantMutation) RemoveOwnerIDs(ids ...int) {
	if m.removedowner == nil {
		m.removedowner = make(map[int]struct{})
	}
	for i := range ids {
		m.removedowner[ids[i]] = struct{}{}
	}
}

// RemovedOwner returns the removed ids of owner.
func (m *RestaurantMutation) RemovedOwnerIDs() (ids []int) {
	for id := range m.removedowner {
		ids = append(ids, id)
	}
	return
}

// OwnerIDs returns the owner ids in the mutation.
func (m *RestaurantMutation) OwnerIDs() (ids []int) {
	for id := range m.owner {
		ids = append(ids, id)
	}
	return
}

// ResetOwner reset all changes of the "owner" edge.
func (m *RestaurantMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
	m.removedowner = nil
}

// AddProductIDs adds the products edge to Product by ids.
func (m *RestaurantMutation) AddProductIDs(ids ...int) {
	if m.products == nil {
		m.products = make(map[int]struct{})
	}
	for i := range ids {
		m.products[ids[i]] = struct{}{}
	}
}

// ClearProducts clears the products edge to Product.
func (m *RestaurantMutation) ClearProducts() {
	m.clearedproducts = true
}

// ProductsCleared returns if the edge products was cleared.
func (m *RestaurantMutation) ProductsCleared() bool {
	return m.clearedproducts
}

// RemoveProductIDs removes the products edge to Product by ids.
func (m *RestaurantMutation) RemoveProductIDs(ids ...int) {
	if m.removedproducts == nil {
		m.removedproducts = make(map[int]struct{})
	}
	for i := range ids {
		m.removedproducts[ids[i]] = struct{}{}
	}
}

// RemovedProducts returns the removed ids of products.
func (m *RestaurantMutation) RemovedProductsIDs() (ids []int) {
	for id := range m.removedproducts {
		ids = append(ids, id)
	}
	return
}

// ProductsIDs returns the products ids in the mutation.
func (m *RestaurantMutation) ProductsIDs() (ids []int) {
	for id := range m.products {
		ids = append(ids, id)
	}
	return
}

// ResetProducts reset all changes of the "products" edge.
func (m *RestaurantMutation) ResetProducts() {
	m.products = nil
	m.clearedproducts = false
	m.removedproducts = nil
}

// Op returns the operation name.
func (m *RestaurantMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Restaurant).
func (m *RestaurantMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RestaurantMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, restaurant.FieldName)
	}
	if m.description != nil {
		fields = append(fields, restaurant.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RestaurantMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case restaurant.FieldName:
		return m.Name()
	case restaurant.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RestaurantMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case restaurant.FieldName:
		return m.OldName(ctx)
	case restaurant.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown Restaurant field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RestaurantMutation) SetField(name string, value ent.Value) error {
	switch name {
	case restaurant.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case restaurant.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown Restaurant field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RestaurantMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RestaurantMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RestaurantMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Restaurant numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RestaurantMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(restaurant.FieldDescription) {
		fields = append(fields, restaurant.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RestaurantMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RestaurantMutation) ClearField(name string) error {
	switch name {
	case restaurant.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown Restaurant nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RestaurantMutation) ResetField(name string) error {
	switch name {
	case restaurant.FieldName:
		m.ResetName()
		return nil
	case restaurant.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown Restaurant field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RestaurantMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.address != nil {
		edges = append(edges, restaurant.EdgeAddress)
	}
	if m.tags != nil {
		edges = append(edges, restaurant.EdgeTags)
	}
	if m.owner != nil {
		edges = append(edges, restaurant.EdgeOwner)
	}
	if m.products != nil {
		edges = append(edges, restaurant.EdgeProducts)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RestaurantMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case restaurant.EdgeAddress:
		if id := m.address; id != nil {
			return []ent.Value{*id}
		}
	case restaurant.EdgeTags:
		ids := make([]ent.Value, 0, len(m.tags))
		for id := range m.tags {
			ids = append(ids, id)
		}
		return ids
	case restaurant.EdgeOwner:
		ids := make([]ent.Value, 0, len(m.owner))
		for id := range m.owner {
			ids = append(ids, id)
		}
		return ids
	case restaurant.EdgeProducts:
		ids := make([]ent.Value, 0, len(m.products))
		for id := range m.products {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RestaurantMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedtags != nil {
		edges = append(edges, restaurant.EdgeTags)
	}
	if m.removedowner != nil {
		edges = append(edges, restaurant.EdgeOwner)
	}
	if m.removedproducts != nil {
		edges = append(edges, restaurant.EdgeProducts)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RestaurantMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case restaurant.EdgeTags:
		ids := make([]ent.Value, 0, len(m.removedtags))
		for id := range m.removedtags {
			ids = append(ids, id)
		}
		return ids
	case restaurant.EdgeOwner:
		ids := make([]ent.Value, 0, len(m.removedowner))
		for id := range m.removedowner {
			ids = append(ids, id)
		}
		return ids
	case restaurant.EdgeProducts:
		ids := make([]ent.Value, 0, len(m.removedproducts))
		for id := range m.removedproducts {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RestaurantMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedaddress {
		edges = append(edges, restaurant.EdgeAddress)
	}
	if m.clearedtags {
		edges = append(edges, restaurant.EdgeTags)
	}
	if m.clearedowner {
		edges = append(edges, restaurant.EdgeOwner)
	}
	if m.clearedproducts {
		edges = append(edges, restaurant.EdgeProducts)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RestaurantMutation) EdgeCleared(name string) bool {
	switch name {
	case restaurant.EdgeAddress:
		return m.clearedaddress
	case restaurant.EdgeTags:
		return m.clearedtags
	case restaurant.EdgeOwner:
		return m.clearedowner
	case restaurant.EdgeProducts:
		return m.clearedproducts
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RestaurantMutation) ClearEdge(name string) error {
	switch name {
	case restaurant.EdgeAddress:
		m.ClearAddress()
		return nil
	}
	return fmt.Errorf("unknown Restaurant unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RestaurantMutation) ResetEdge(name string) error {
	switch name {
	case restaurant.EdgeAddress:
		m.ResetAddress()
		return nil
	case restaurant.EdgeTags:
		m.ResetTags()
		return nil
	case restaurant.EdgeOwner:
		m.ResetOwner()
		return nil
	case restaurant.EdgeProducts:
		m.ResetProducts()
		return nil
	}
	return fmt.Errorf("unknown Restaurant edge %s", name)
}

// RestaurantOwnerMutation represents an operation that mutate the RestaurantOwners
// nodes in the graph.
type RestaurantOwnerMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	kratos_id           *string
	name                *string
	email               *string
	phone               *string
	clearedFields       map[string]struct{}
	banking_data        *int
	clearedbanking_data bool
	restaurant          *int
	clearedrestaurant   bool
	done                bool
	oldValue            func(context.Context) (*RestaurantOwner, error)
}

var _ ent.Mutation = (*RestaurantOwnerMutation)(nil)

// restaurantownerOption allows to manage the mutation configuration using functional options.
type restaurantownerOption func(*RestaurantOwnerMutation)

// newRestaurantOwnerMutation creates new mutation for $n.Name.
func newRestaurantOwnerMutation(c config, op Op, opts ...restaurantownerOption) *RestaurantOwnerMutation {
	m := &RestaurantOwnerMutation{
		config:        c,
		op:            op,
		typ:           TypeRestaurantOwner,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRestaurantOwnerID sets the id field of the mutation.
func withRestaurantOwnerID(id int) restaurantownerOption {
	return func(m *RestaurantOwnerMutation) {
		var (
			err   error
			once  sync.Once
			value *RestaurantOwner
		)
		m.oldValue = func(ctx context.Context) (*RestaurantOwner, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RestaurantOwner.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRestaurantOwner sets the old RestaurantOwner of the mutation.
func withRestaurantOwner(node *RestaurantOwner) restaurantownerOption {
	return func(m *RestaurantOwnerMutation) {
		m.oldValue = func(context.Context) (*RestaurantOwner, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RestaurantOwnerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RestaurantOwnerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RestaurantOwnerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetKratosID sets the kratos_id field.
func (m *RestaurantOwnerMutation) SetKratosID(s string) {
	m.kratos_id = &s
}

// KratosID returns the kratos_id value in the mutation.
func (m *RestaurantOwnerMutation) KratosID() (r string, exists bool) {
	v := m.kratos_id
	if v == nil {
		return
	}
	return *v, true
}

// OldKratosID returns the old kratos_id value of the RestaurantOwner.
// If the RestaurantOwner object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RestaurantOwnerMutation) OldKratosID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldKratosID is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldKratosID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKratosID: %w", err)
	}
	return oldValue.KratosID, nil
}

// ResetKratosID reset all changes of the "kratos_id" field.
func (m *RestaurantOwnerMutation) ResetKratosID() {
	m.kratos_id = nil
}

// SetName sets the name field.
func (m *RestaurantOwnerMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *RestaurantOwnerMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the RestaurantOwner.
// If the RestaurantOwner object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RestaurantOwnerMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *RestaurantOwnerMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the email field.
func (m *RestaurantOwnerMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the email value in the mutation.
func (m *RestaurantOwnerMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old email value of the RestaurantOwner.
// If the RestaurantOwner object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RestaurantOwnerMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail reset all changes of the "email" field.
func (m *RestaurantOwnerMutation) ResetEmail() {
	m.email = nil
}

// SetPhone sets the phone field.
func (m *RestaurantOwnerMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the phone value in the mutation.
func (m *RestaurantOwnerMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old phone value of the RestaurantOwner.
// If the RestaurantOwner object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RestaurantOwnerMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPhone is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone reset all changes of the "phone" field.
func (m *RestaurantOwnerMutation) ResetPhone() {
	m.phone = nil
}

// SetBankingDataID sets the banking_data edge to BankingData by id.
func (m *RestaurantOwnerMutation) SetBankingDataID(id int) {
	m.banking_data = &id
}

// ClearBankingData clears the banking_data edge to BankingData.
func (m *RestaurantOwnerMutation) ClearBankingData() {
	m.clearedbanking_data = true
}

// BankingDataCleared returns if the edge banking_data was cleared.
func (m *RestaurantOwnerMutation) BankingDataCleared() bool {
	return m.clearedbanking_data
}

// BankingDataID returns the banking_data id in the mutation.
func (m *RestaurantOwnerMutation) BankingDataID() (id int, exists bool) {
	if m.banking_data != nil {
		return *m.banking_data, true
	}
	return
}

// BankingDataIDs returns the banking_data ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// BankingDataID instead. It exists only for internal usage by the builders.
func (m *RestaurantOwnerMutation) BankingDataIDs() (ids []int) {
	if id := m.banking_data; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBankingData reset all changes of the "banking_data" edge.
func (m *RestaurantOwnerMutation) ResetBankingData() {
	m.banking_data = nil
	m.clearedbanking_data = false
}

// SetRestaurantID sets the restaurant edge to Restaurant by id.
func (m *RestaurantOwnerMutation) SetRestaurantID(id int) {
	m.restaurant = &id
}

// ClearRestaurant clears the restaurant edge to Restaurant.
func (m *RestaurantOwnerMutation) ClearRestaurant() {
	m.clearedrestaurant = true
}

// RestaurantCleared returns if the edge restaurant was cleared.
func (m *RestaurantOwnerMutation) RestaurantCleared() bool {
	return m.clearedrestaurant
}

// RestaurantID returns the restaurant id in the mutation.
func (m *RestaurantOwnerMutation) RestaurantID() (id int, exists bool) {
	if m.restaurant != nil {
		return *m.restaurant, true
	}
	return
}

// RestaurantIDs returns the restaurant ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// RestaurantID instead. It exists only for internal usage by the builders.
func (m *RestaurantOwnerMutation) RestaurantIDs() (ids []int) {
	if id := m.restaurant; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRestaurant reset all changes of the "restaurant" edge.
func (m *RestaurantOwnerMutation) ResetRestaurant() {
	m.restaurant = nil
	m.clearedrestaurant = false
}

// Op returns the operation name.
func (m *RestaurantOwnerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (RestaurantOwner).
func (m *RestaurantOwnerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RestaurantOwnerMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.kratos_id != nil {
		fields = append(fields, restaurantowner.FieldKratosID)
	}
	if m.name != nil {
		fields = append(fields, restaurantowner.FieldName)
	}
	if m.email != nil {
		fields = append(fields, restaurantowner.FieldEmail)
	}
	if m.phone != nil {
		fields = append(fields, restaurantowner.FieldPhone)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RestaurantOwnerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case restaurantowner.FieldKratosID:
		return m.KratosID()
	case restaurantowner.FieldName:
		return m.Name()
	case restaurantowner.FieldEmail:
		return m.Email()
	case restaurantowner.FieldPhone:
		return m.Phone()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RestaurantOwnerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case restaurantowner.FieldKratosID:
		return m.OldKratosID(ctx)
	case restaurantowner.FieldName:
		return m.OldName(ctx)
	case restaurantowner.FieldEmail:
		return m.OldEmail(ctx)
	case restaurantowner.FieldPhone:
		return m.OldPhone(ctx)
	}
	return nil, fmt.Errorf("unknown RestaurantOwner field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RestaurantOwnerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case restaurantowner.FieldKratosID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKratosID(v)
		return nil
	case restaurantowner.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case restaurantowner.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case restaurantowner.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	}
	return fmt.Errorf("unknown RestaurantOwner field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RestaurantOwnerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RestaurantOwnerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RestaurantOwnerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RestaurantOwner numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RestaurantOwnerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RestaurantOwnerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RestaurantOwnerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RestaurantOwner nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RestaurantOwnerMutation) ResetField(name string) error {
	switch name {
	case restaurantowner.FieldKratosID:
		m.ResetKratosID()
		return nil
	case restaurantowner.FieldName:
		m.ResetName()
		return nil
	case restaurantowner.FieldEmail:
		m.ResetEmail()
		return nil
	case restaurantowner.FieldPhone:
		m.ResetPhone()
		return nil
	}
	return fmt.Errorf("unknown RestaurantOwner field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RestaurantOwnerMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.banking_data != nil {
		edges = append(edges, restaurantowner.EdgeBankingData)
	}
	if m.restaurant != nil {
		edges = append(edges, restaurantowner.EdgeRestaurant)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RestaurantOwnerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case restaurantowner.EdgeBankingData:
		if id := m.banking_data; id != nil {
			return []ent.Value{*id}
		}
	case restaurantowner.EdgeRestaurant:
		if id := m.restaurant; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RestaurantOwnerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RestaurantOwnerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RestaurantOwnerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedbanking_data {
		edges = append(edges, restaurantowner.EdgeBankingData)
	}
	if m.clearedrestaurant {
		edges = append(edges, restaurantowner.EdgeRestaurant)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RestaurantOwnerMutation) EdgeCleared(name string) bool {
	switch name {
	case restaurantowner.EdgeBankingData:
		return m.clearedbanking_data
	case restaurantowner.EdgeRestaurant:
		return m.clearedrestaurant
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RestaurantOwnerMutation) ClearEdge(name string) error {
	switch name {
	case restaurantowner.EdgeBankingData:
		m.ClearBankingData()
		return nil
	case restaurantowner.EdgeRestaurant:
		m.ClearRestaurant()
		return nil
	}
	return fmt.Errorf("unknown RestaurantOwner unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RestaurantOwnerMutation) ResetEdge(name string) error {
	switch name {
	case restaurantowner.EdgeBankingData:
		m.ResetBankingData()
		return nil
	case restaurantowner.EdgeRestaurant:
		m.ResetRestaurant()
		return nil
	}
	return fmt.Errorf("unknown RestaurantOwner edge %s", name)
}

// TagMutation represents an operation that mutate the Tags
// nodes in the graph.
type TagMutation struct {
	config
	op                Op
	typ               string
	id                *int
	name              *string
	clearedFields     map[string]struct{}
	product           map[int]struct{}
	removedproduct    map[int]struct{}
	clearedproduct    bool
	restaurant        map[int]struct{}
	removedrestaurant map[int]struct{}
	clearedrestaurant bool
	done              bool
	oldValue          func(context.Context) (*Tag, error)
}

var _ ent.Mutation = (*TagMutation)(nil)

// tagOption allows to manage the mutation configuration using functional options.
type tagOption func(*TagMutation)

// newTagMutation creates new mutation for $n.Name.
func newTagMutation(c config, op Op, opts ...tagOption) *TagMutation {
	m := &TagMutation{
		config:        c,
		op:            op,
		typ:           TypeTag,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTagID sets the id field of the mutation.
func withTagID(id int) tagOption {
	return func(m *TagMutation) {
		var (
			err   error
			once  sync.Once
			value *Tag
		)
		m.oldValue = func(ctx context.Context) (*Tag, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tag.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTag sets the old Tag of the mutation.
func withTag(node *Tag) tagOption {
	return func(m *TagMutation) {
		m.oldValue = func(context.Context) (*Tag, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TagMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TagMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *TagMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *TagMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *TagMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old name value of the Tag.
// If the Tag object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *TagMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName reset all changes of the "name" field.
func (m *TagMutation) ResetName() {
	m.name = nil
}

// AddProductIDs adds the product edge to Product by ids.
func (m *TagMutation) AddProductIDs(ids ...int) {
	if m.product == nil {
		m.product = make(map[int]struct{})
	}
	for i := range ids {
		m.product[ids[i]] = struct{}{}
	}
}

// ClearProduct clears the product edge to Product.
func (m *TagMutation) ClearProduct() {
	m.clearedproduct = true
}

// ProductCleared returns if the edge product was cleared.
func (m *TagMutation) ProductCleared() bool {
	return m.clearedproduct
}

// RemoveProductIDs removes the product edge to Product by ids.
func (m *TagMutation) RemoveProductIDs(ids ...int) {
	if m.removedproduct == nil {
		m.removedproduct = make(map[int]struct{})
	}
	for i := range ids {
		m.removedproduct[ids[i]] = struct{}{}
	}
}

// RemovedProduct returns the removed ids of product.
func (m *TagMutation) RemovedProductIDs() (ids []int) {
	for id := range m.removedproduct {
		ids = append(ids, id)
	}
	return
}

// ProductIDs returns the product ids in the mutation.
func (m *TagMutation) ProductIDs() (ids []int) {
	for id := range m.product {
		ids = append(ids, id)
	}
	return
}

// ResetProduct reset all changes of the "product" edge.
func (m *TagMutation) ResetProduct() {
	m.product = nil
	m.clearedproduct = false
	m.removedproduct = nil
}

// AddRestaurantIDs adds the restaurant edge to Restaurant by ids.
func (m *TagMutation) AddRestaurantIDs(ids ...int) {
	if m.restaurant == nil {
		m.restaurant = make(map[int]struct{})
	}
	for i := range ids {
		m.restaurant[ids[i]] = struct{}{}
	}
}

// ClearRestaurant clears the restaurant edge to Restaurant.
func (m *TagMutation) ClearRestaurant() {
	m.clearedrestaurant = true
}

// RestaurantCleared returns if the edge restaurant was cleared.
func (m *TagMutation) RestaurantCleared() bool {
	return m.clearedrestaurant
}

// RemoveRestaurantIDs removes the restaurant edge to Restaurant by ids.
func (m *TagMutation) RemoveRestaurantIDs(ids ...int) {
	if m.removedrestaurant == nil {
		m.removedrestaurant = make(map[int]struct{})
	}
	for i := range ids {
		m.removedrestaurant[ids[i]] = struct{}{}
	}
}

// RemovedRestaurant returns the removed ids of restaurant.
func (m *TagMutation) RemovedRestaurantIDs() (ids []int) {
	for id := range m.removedrestaurant {
		ids = append(ids, id)
	}
	return
}

// RestaurantIDs returns the restaurant ids in the mutation.
func (m *TagMutation) RestaurantIDs() (ids []int) {
	for id := range m.restaurant {
		ids = append(ids, id)
	}
	return
}

// ResetRestaurant reset all changes of the "restaurant" edge.
func (m *TagMutation) ResetRestaurant() {
	m.restaurant = nil
	m.clearedrestaurant = false
	m.removedrestaurant = nil
}

// Op returns the operation name.
func (m *TagMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Tag).
func (m *TagMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *TagMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, tag.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *TagMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tag.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *TagMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tag.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Tag field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *TagMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tag.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Tag field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *TagMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *TagMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *TagMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Tag numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *TagMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *TagMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *TagMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Tag nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *TagMutation) ResetField(name string) error {
	switch name {
	case tag.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Tag field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *TagMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.product != nil {
		edges = append(edges, tag.EdgeProduct)
	}
	if m.restaurant != nil {
		edges = append(edges, tag.EdgeRestaurant)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *TagMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case tag.EdgeProduct:
		ids := make([]ent.Value, 0, len(m.product))
		for id := range m.product {
			ids = append(ids, id)
		}
		return ids
	case tag.EdgeRestaurant:
		ids := make([]ent.Value, 0, len(m.restaurant))
		for id := range m.restaurant {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *TagMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedproduct != nil {
		edges = append(edges, tag.EdgeProduct)
	}
	if m.removedrestaurant != nil {
		edges = append(edges, tag.EdgeRestaurant)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *TagMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case tag.EdgeProduct:
		ids := make([]ent.Value, 0, len(m.removedproduct))
		for id := range m.removedproduct {
			ids = append(ids, id)
		}
		return ids
	case tag.EdgeRestaurant:
		ids := make([]ent.Value, 0, len(m.removedrestaurant))
		for id := range m.removedrestaurant {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *TagMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedproduct {
		edges = append(edges, tag.EdgeProduct)
	}
	if m.clearedrestaurant {
		edges = append(edges, tag.EdgeRestaurant)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *TagMutation) EdgeCleared(name string) bool {
	switch name {
	case tag.EdgeProduct:
		return m.clearedproduct
	case tag.EdgeRestaurant:
		return m.clearedrestaurant
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *TagMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Tag unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *TagMutation) ResetEdge(name string) error {
	switch name {
	case tag.EdgeProduct:
		m.ResetProduct()
		return nil
	case tag.EdgeRestaurant:
		m.ResetRestaurant()
		return nil
	}
	return fmt.Errorf("unknown Tag edge %s", name)
}
