// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"foodworks.ml/m/internal/generated/ent"
	"github.com/99designs/gqlgen/graphql"
)

type FeedCard interface {
	IsFeedCard()
}

type CancelOrder struct {
	OrderID int `json:"orderID"`
}

type DeleteImageInput struct {
	FileNames []string `json:"fileNames"`
}

type FeedItem struct {
	Name  *string    `json:"name"`
	Cards []FeedCard `json:"cards"`
}

type GlobalSearchResult struct {
	Restaurants []*ent.Restaurant `json:"restaurants"`
	Products    []*ent.Product    `json:"products"`
}

type PaymentMethodInput struct {
	Data string `json:"data"`
}

type ProductSearchResult struct {
	Product  *ent.Product `json:"product"`
	Distance float64      `json:"distance"`
}

type ProductsByAllFieldsInput struct {
	SearchString        string                     `json:"searchString"`
	ProductFilterConfig *ProductsFilterConfigInput `json:"productFilterConfig"`
}

type ProductsFilterByRestaurantInput struct {
	RestaurantID        int                        `json:"restaurantID"`
	ProductFilterConfig *ProductsFilterConfigInput `json:"productFilterConfig"`
}

type ProductsFilterByTagInput struct {
	Tag                 int                        `json:"tag"`
	ProductFilterConfig *ProductsFilterConfigInput `json:"productFilterConfig"`
}

type ProductsFilterConfigInput struct {
	IncludeInactive *bool `json:"includeInactive"`
}

type RegisterAddressInput struct {
	Latitude   float64 `json:"latitude"`
	Longitude  float64 `json:"longitude"`
	StreetLine string  `json:"streetLine"`
}

type RegisterBankingInput struct {
	BankAccount string `json:"bankAccount"`
}

type RegisterCustomerInput struct {
	Name     string                `json:"name"`
	LastName string                `json:"lastName"`
	Phone    string                `json:"phone"`
	Address  *RegisterAddressInput `json:"address"`
}

type RegisterOrderInput struct {
	ProductID int `json:"productID"`
	Quantity  int `json:"quantity"`
}

type RegisterProductInput struct {
	Name         string   `json:"name"`
	Description  string   `json:"description"`
	Tags         []string `json:"tags"`
	Cost         int      `json:"cost"`
	Active       bool     `json:"active"`
	RestaurantID int      `json:"restaurantID"`
}

type RegisterRatingInput struct {
	ProductID int     `json:"productID"`
	Rating    int     `json:"rating"`
	Comment   *string `json:"comment"`
}

type RegisterRestaurantInput struct {
	Name        string                `json:"name"`
	Address     *RegisterAddressInput `json:"address"`
	Description string                `json:"description"`
	Tags        []string              `json:"tags"`
}

type RegisterRestaurantOwnerInput struct {
	Name       string                   `json:"name"`
	LastName   string                   `json:"lastName"`
	Phone      string                   `json:"phone"`
	Banking    *RegisterBankingInput    `json:"banking"`
	Restaurant *RegisterRestaurantInput `json:"restaurant"`
}

type TagCard struct {
	Tag *string `json:"tag"`
}

func (TagCard) IsFeedCard() {}

type UpdateCustomerInput struct {
	Name     string `json:"name"`
	LastName string `json:"lastName"`
	Phone    string `json:"phone"`
}

type UpdateOrderInput struct {
	OrderID    int        `json:"orderID"`
	OrderState OrderState `json:"orderState"`
}

type UpdateProductInput struct {
	ID          int      `json:"ID"`
	Name        string   `json:"name"`
	Description string   `json:"description"`
	Tags        []string `json:"tags"`
	Cost        int      `json:"cost"`
	Active      bool     `json:"active"`
}

type UpdateRatingInput struct {
	ID      int     `json:"ID"`
	Rating  int     `json:"rating"`
	Comment *string `json:"comment"`
}

type UpdateRestaurantOwnerInput struct {
	Name     string `json:"name"`
	LastName string `json:"lastName"`
	Phone    string `json:"phone"`
}

type UploadImageInput struct {
	Files []*graphql.Upload `json:"files"`
}

type OrderState string

const (
	OrderStatePendingPayment OrderState = "PENDING_PAYMENT"
	OrderStatePaid           OrderState = "PAID"
	OrderStateCompleted      OrderState = "COMPLETED"
	OrderStateCancelled      OrderState = "CANCELLED"
	OrderStateError          OrderState = "ERROR"
)

var AllOrderState = []OrderState{
	OrderStatePendingPayment,
	OrderStatePaid,
	OrderStateCompleted,
	OrderStateCancelled,
	OrderStateError,
}

func (e OrderState) IsValid() bool {
	switch e {
	case OrderStatePendingPayment, OrderStatePaid, OrderStateCompleted, OrderStateCancelled, OrderStateError:
		return true
	}
	return false
}

func (e OrderState) String() string {
	return string(e)
}

func (e *OrderState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderState", str)
	}
	return nil
}

func (e OrderState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleOwner    Role = "OWNER"
	RoleCustomer Role = "CUSTOMER"
)

var AllRole = []Role{
	RoleOwner,
	RoleCustomer,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleOwner, RoleCustomer:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
