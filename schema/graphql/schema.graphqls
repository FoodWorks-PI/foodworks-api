 # GraphQL schema example
# Do we want id?
# TODO: Split schema into multiple files per domain

# Customer

# interface User {
#   ID: ID!
#   Name: String!
#   Email: String!
# }

#TODO: Image Upload/Download in: Product, Restaurant, Tag
input RegisterAddressInput {
  latitude: Float!
  longitude: Float!
  streetLine: String!
}

input RegisterBankingInput {
  bankAccount: String!
}

input RegisterCustomerInput {
  name: String!
  phone: String!
  address: RegisterAddressInput!
}

input UpdateCustomerInput {
  name: String!
  phone: String!
}

input RegisterRestaurantInput {
  name: String!
  address: RegisterAddressInput!
  description: String!
  tags: [RegisterTagInput!]!
}

input RegisterTagInput {
  name: String!
}



input RegisterRestaurantOwnerInput {
  name: String!
  phone: String!
  banking: RegisterBankingInput!
  restaurant: RegisterRestaurantInput!
}

input UpdateRestaurantOwnerInput {
  name: String!
  phone: String!
}

type Address {
  latitude: Float!
  longitude: Float!
  streetLine: String!
}

type BankingData {
  bankAccount: String!
}

type Customer {
  ID: ID!
  name: String!
  email: String!
  address: Address!
  phone: String!
  # favoriteProducts: [Product]
}

type RestaurantOwner {
  ID: ID!
  name: String!
  email: String!
  phone: String!
  banking : BankingData!
  restaurant: Restaurant!
}

type Restaurant {
  ID: ID!
  name: String!
  address: Address!
  description: String!
  tags: [Tag!]!
  products: [Product]
  restaurantOwner: RestaurantOwner!
}

type Product {
  ID: ID!
  name: String!
  description: String!
  tags: [Tag!]!
  cost: Int! # Manejar como centavos
  active: Boolean!
  restaurant: Restaurant # Es necesario?
  # quantity: Int!
  # recurrence: Recurrence
}

type Tag {
  ID: ID!
  name: String!
}

type RestaurantSearchResult {
  restaurant: Restaurant!
  distance: Float!
}

type Query {
  getCurrentCustomer: Customer!
  getClosestRestaurants(input: Int): [RestaurantSearchResult!]!
  getCurrentRestaurantOwner : RestaurantOwner!
  getProductsByAllFields(input: String): [Product!]!
}

type Mutation {
  createCustomerProfile(input:RegisterCustomerInput!): ID!
  createRestaurantOwnerProfile(input:RegisterRestaurantOwnerInput!): ID!

  updateCustomerProfile(input:UpdateCustomerInput!): ID!
  updateCustomerAddress(input:RegisterAddressInput!):ID!

  deleteCustomerProfile: ID!

  updateRestaurantOwnerProfile(input:UpdateRestaurantOwnerInput!): ID!
  updateRestaurantOwnerBankingData(input:RegisterBankingInput!): ID!
  updateRestaurant(input:RegisterRestaurantInput!): ID!

  deleteRestaurantOwnerProfile : ID!

  # createOrder(input: CreateOrderInput): CreateOrderPayload!
  # updateOrder(input: UpdateOrderInput): UpdateOrderPayload!
}
