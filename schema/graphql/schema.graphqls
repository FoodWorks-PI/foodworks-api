 # GraphQL schema example
# Do we want id?
# TODO: Split schema into multiple files per domain

# Customer

# interface User {
#   ID: ID!
#   Name: String!
#   Email: String!
# }

#TODO: Image Upload/Download in: Product, Restaurant, Tag
input RegisterAddressInput {
  latitude: Float!
  longitude: Float!
  streetLine: String!
}

type Address {
  latitude: Float!
  longitude: Float!
  streetLine: String!
}


input RegisterBankingInput {
  bankAccount: String!
}

type BankingData {
  bankAccount: String!
}


input RegisterCustomerInput {
  name: String!
  lastName: String!
  phone: String!
  address: RegisterAddressInput!
}

input UpdateCustomerInput {
  name: String!
  lastName: String!
  phone: String!
}

type Customer {
  ID: ID!
  name: String!
  email: String!
  address: Address!
  phone: String!
  ratedProducts: [Rating!]!
  # favoriteProducts: [Product]
}


input RegisterProductInput {
  name: String!
  description: String!
  tags: [String!]!
  cost: Int! # Manejar como centavos
  active: Boolean!
  restaurantID: ID! # Es necesario?
}

input UpdateProductInput {
  productID: ID!
  name: String!
  description: String!
  tags: [String!]!
  cost: Int! # Manejar como centavos
  active: Boolean!
}

input ProductsFilterConfigInput {
  includeInactive: Boolean
  #oderByField: smt
}

input ProductsByAllFieldsInput {
  searchString: String!
  productFilterConfig: ProductsFilterConfigInput
}

input ProductsFilterByRestaurantInput {
  restaurantID: ID!
  productFilterConfig: ProductsFilterConfigInput
}

input ProductsFilterByTagInput {
  tag: ID!
  productFilterConfig: ProductsFilterConfigInput
}

type Product {
  ID: ID!
  name: String!
  description: String!
  tags: [Tag!]!
  cost: Int! # Manejar como centavos
  isActive: Boolean!
  averageRating: Float!
  ratings: [Rating!]!
  restaurant: Restaurant! # Es necesario?
  # quantity: Int!
  # recurrence: Recurrence
}

input RegisterRatingInput {
  productID : ID!
  rating: Int!
  comment: String
}
 input UpdateRatingInput {
   ID : ID!
   productID : ID!
   rating: Int!
   comment: String
 }

type Rating {
  ID: ID!
  rating: Int!
  product: Product!
  customer: Customer!
  comment: String
}

input RegisterRestaurantInput {
  name: String!
  address: RegisterAddressInput!
  description: String!
  tags: [String!]!
}

type Restaurant {
  ID: ID!
  name: String!
  description: String!
  address: Address!
  tags: [Tag!]!
  products: [Product!]!
  restaurantOwner: RestaurantOwner!
}

type Tag {
  name: String!
}

input RegisterRestaurantOwnerInput {
  name: String!
  lastName: String!
  phone: String!
  banking: RegisterBankingInput!
  restaurant: RegisterRestaurantInput!
}

input UpdateRestaurantOwnerInput {
  name: String!
  lastName: String!
  phone: String!
}

type RestaurantOwner {
  ID: ID!
  name: String!
  email: String!
  phone: String!
  banking : BankingData!
  restaurant: Restaurant!
}


type RestaurantSearchResult {
  restaurant: Restaurant!
  distance: Float!
}

scalar Upload

input UploadImageInput{
  files: [Upload!]!
}

input DeleteImageInput {
  fileNames: [String!]!
}

type Query {
  getCurrentCustomer: Customer!
  getCurrentRestaurantOwner: RestaurantOwner!

  getRestaurantByID(input: ID!): Restaurant!
  getClosestRestaurants(input: Int): [RestaurantSearchResult!]!

  getProductsByRestaurantID(input: ProductsFilterByRestaurantInput!): [Product!]!
  getProductById(input: ID!): Product!
  getProductsByAllFields(input: ProductsByAllFieldsInput!): [Product!]!

  autoCompleteTag(input: String!): [Tag]!
}

type Mutation {
  createCustomerProfile(input: RegisterCustomerInput!): ID!
  updateCustomerProfile(input: UpdateCustomerInput!): ID!
  updateCustomerAddress(input: RegisterAddressInput!): ID!
  deleteCustomerProfile: ID!

  createRestaurantOwnerProfile(input: RegisterRestaurantOwnerInput!): ID!
  updateRestaurantOwnerProfile(input: UpdateRestaurantOwnerInput!): ID!
  updateRestaurantOwnerBankingData(input: RegisterBankingInput!): ID!
  deleteRestaurantOwnerProfile: ID!

  createProduct(input: RegisterProductInput!): ID!
  updateProduct(input: UpdateProductInput!): ID!
  toggleProductStatus(input: ID!): Boolean!
  uploadProductPhoto(input: UploadImageInput!): [String!]!
  deleteProductPhoto(input: [String!]!): ID!
  deleteProduct(input: ID!): ID!

  updateRestaurant(input:RegisterRestaurantInput!): ID!
  uploadRestaurantPhoto(input: UploadImageInput!): [String!]!
  deleteRestuarantPhoto(input: DeleteImageInput!): ID!
  deleteRestaurant(input: ID!): ID!

  createProductRating(input: RegisterRatingInput!): ID!
  updateProductRating(input: UpdateRatingInput!): ID!
  deleteRating(input: ID!): ID!

  uploadPhotoDemo(input:UploadImageInput!): [String!]!
  deletePhotoDemo(input:DeleteImageInput!): [String!]!

  # createOrder(input: CreateOrderInput): CreateOrderPayload!
  # updateOrder(input: UpdateOrderInput): UpdateOrderPayload!
}
